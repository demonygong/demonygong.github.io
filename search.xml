<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>原生分页</title>
      <link href="/2022/11/03/%E5%8E%9F%E7%94%9F%E5%88%86%E9%A1%B5/"/>
      <url>/2022/11/03/%E5%8E%9F%E7%94%9F%E5%88%86%E9%A1%B5/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/paging-js/paging.jpg" alt="mvvm"></p><a id="more"></a><p>只做page分页处理（无关limit）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;utf-8&quot; &#x2F;&gt;</span><br><span class="line">    &lt;title&gt;分页组件&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">      * &#123;</span><br><span class="line">        margin: 0;</span><br><span class="line">        padding: 0;</span><br><span class="line">        list-style: none;</span><br><span class="line">      &#125;</span><br><span class="line">      a &#123;</span><br><span class="line">        text-decoration: none;</span><br><span class="line">      &#125;</span><br><span class="line">      a:hover &#123;</span><br><span class="line">        text-decoration: none;</span><br><span class="line">      &#125;</span><br><span class="line">      h2 &#123;</span><br><span class="line">        text-align: center;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      .tcdPageCode &#123;</span><br><span class="line">        padding: 15px 20px;</span><br><span class="line">        text-align: left;</span><br><span class="line">        color: #ccc;</span><br><span class="line">        text-align: center;</span><br><span class="line">      &#125;</span><br><span class="line">      .tcdPageCode a &#123;</span><br><span class="line">        display: inline-block;</span><br><span class="line">        color: #428bca;</span><br><span class="line">        display: inline-block;</span><br><span class="line">        height: 25px;</span><br><span class="line">        line-height: 25px;</span><br><span class="line">        padding: 0 10px;</span><br><span class="line">        border: 1px solid #ddd;</span><br><span class="line">        margin: 0 2px;</span><br><span class="line">        border-radius: 4px;</span><br><span class="line">        vertical-align: middle;</span><br><span class="line">      &#125;</span><br><span class="line">      .tcdPageCode a:hover &#123;</span><br><span class="line">        text-decoration: none;</span><br><span class="line">        border: 1px solid #428bca;</span><br><span class="line">      &#125;</span><br><span class="line">      .tcdPageCode span.current &#123;</span><br><span class="line">        display: inline-block;</span><br><span class="line">        height: 25px;</span><br><span class="line">        line-height: 25px;</span><br><span class="line">        padding: 0 10px;</span><br><span class="line">        margin: 0 2px;</span><br><span class="line">        color: #fff;</span><br><span class="line">        background-color: #428bca;</span><br><span class="line">        border: 1px solid #428bca;</span><br><span class="line">        border-radius: 4px;</span><br><span class="line">        vertical-align: middle;</span><br><span class="line">      &#125;</span><br><span class="line">      .tcdPageCode span.disabled &#123;</span><br><span class="line">        display: inline-block;</span><br><span class="line">        height: 25px;</span><br><span class="line">        line-height: 25px;</span><br><span class="line">        padding: 0 10px;</span><br><span class="line">        margin: 0 2px;</span><br><span class="line">        color: #bfbfbf;</span><br><span class="line">        background: #f2f2f2;</span><br><span class="line">        border: 1px solid #bfbfbf;</span><br><span class="line">        border-radius: 4px;</span><br><span class="line">        vertical-align: middle;</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">  &lt;&#x2F;head&gt;</span><br><span class="line"></span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h2&gt;原生分页&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;div2&quot; class&#x3D;&quot;tcdPageCode&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">      function Page(obj, ojson) &#123;</span><br><span class="line">        if (obj) &#123;</span><br><span class="line">          this.obj &#x3D; obj</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          console.log(&#39;obj 错误！&#39;)</span><br><span class="line">          return false</span><br><span class="line">        &#125;</span><br><span class="line">        this.data &#x3D; &#123;</span><br><span class="line">          pageCount: ojson.pageCount || false, &#x2F;&#x2F;总页数</span><br><span class="line">          current: ojson.current || false, &#x2F;&#x2F;当前页</span><br><span class="line">          prevHTML: ojson.prevHTML || &#39;上一页&#39;,</span><br><span class="line">          nextHTML: ojson.nextHTML || &#39;下一页&#39;,</span><br><span class="line">          backFn: ojson.backFn || function (p) &#123;&#125; &#x2F;&#x2F;回调</span><br><span class="line">        &#125;</span><br><span class="line">        this.init(this.data)</span><br><span class="line">        this.Event()</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      Page.prototype.init &#x3D; function (n) &#123;</span><br><span class="line">        this.obj.innerHTML &#x3D; &#39;&#39;</span><br><span class="line">        &#x2F;&#x2F;上一页</span><br><span class="line">        if (n.current &gt; 1) &#123;</span><br><span class="line">          this.prev &#x3D; document.createElement(&#39;a&#39;)</span><br><span class="line">          this.next.href &#x3D; &#39;javascript:;&#39;</span><br><span class="line">          this.prev.className &#x3D; &#39;prevPage&#39;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          this.prev &#x3D; document.createElement(&#39;span&#39;)</span><br><span class="line">          this.prev.className &#x3D; &#39;disabled&#39;</span><br><span class="line">        &#125;</span><br><span class="line">        this.prev.innerHTML &#x3D; this.data.prevHTML</span><br><span class="line">        this.obj.appendChild(this.prev)</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;中间页码</span><br><span class="line">        if (n.current !&#x3D; 1 &amp;&amp; n.current &gt;&#x3D; 4 &amp;&amp; n.pageCount !&#x3D; 4) &#123;</span><br><span class="line">          this.obj.innerHTML +&#x3D; &#39;&lt;a index&#x3D;&quot;&#39; + 1 + &#39;&quot; href&#x3D;&quot;javascript:;&quot; class&#x3D;&quot;tcdNumber&quot;&gt;&#39; + 1 + &#39;&lt;&#x2F;a&gt;&#39;</span><br><span class="line">        &#125;</span><br><span class="line">        if (n.current - 2 &gt; 2 &amp;&amp; n.current &lt;&#x3D; n.pageCount &amp;&amp; n.pageCount &gt; 5) &#123;</span><br><span class="line">          this.obj.innerHTML +&#x3D; &#39;&lt;span&gt;...&lt;&#x2F;span&gt;&#39;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        var start &#x3D; n.current - 2,</span><br><span class="line">          end &#x3D; n.current + 2</span><br><span class="line">        if ((start &gt; 1 &amp;&amp; n.current &lt; 4) || n.current &#x3D;&#x3D; 1) &#123;</span><br><span class="line">          end++</span><br><span class="line">        &#125;</span><br><span class="line">        if (n.current &gt; n.pageCount - 4 &amp;&amp; n.current &gt;&#x3D; n.pageCount) &#123;</span><br><span class="line">          start--</span><br><span class="line">        &#125;</span><br><span class="line">        for (; start &lt;&#x3D; end; start++) &#123;</span><br><span class="line">          if (start &lt;&#x3D; n.pageCount &amp;&amp; start &gt;&#x3D; 1) &#123;</span><br><span class="line">            if (start !&#x3D; n.current) &#123;</span><br><span class="line">              this.obj.innerHTML +&#x3D; &#39;&lt;a index&#x3D;&quot;&#39; + start + &#39;&quot; href&#x3D;&quot;javascript:;&quot; class&#x3D;&quot;tcdNumber&quot;&gt;&#39; + start + &#39;&lt;&#x2F;a&gt;&#39;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">              this.obj.innerHTML +&#x3D; &#39;&lt;span class&#x3D;&quot;current&quot;&gt;&#39; + start + &#39;&lt;&#x2F;span&gt;&#39;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (n.current + 2 &lt; n.pageCount - 1 &amp;&amp; n.current &gt;&#x3D; 1 &amp;&amp; n.pageCount &gt; 5) &#123;</span><br><span class="line">          this.obj.innerHTML +&#x3D; &#39;&lt;span&gt;...&lt;&#x2F;span&gt;&#39;</span><br><span class="line">        &#125;</span><br><span class="line">        if (n.current !&#x3D; n.pageCount &amp;&amp; n.current &lt; n.pageCount - 2 &amp;&amp; n.pageCount !&#x3D; 4) &#123;</span><br><span class="line">          this.obj.innerHTML +&#x3D; &#39;&lt;a index&#x3D;&quot;&#39; + n.pageCount + &#39;&quot; href&#x3D;&quot;javascript:;&quot; class&#x3D;&quot;tcdNumber&quot;&gt;&#39; + n.pageCount + &#39;&lt;&#x2F;a&gt;&#39;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;下一页</span><br><span class="line">        if (n.current &lt; this.data.pageCount) &#123;</span><br><span class="line">          this.next &#x3D; document.createElement(&#39;a&#39;)</span><br><span class="line">          this.next.href &#x3D; &#39;javascript:;&#39;</span><br><span class="line">          this.next.className &#x3D; &#39;nextPage&#39;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          this.next &#x3D; document.createElement(&#39;span&#39;)</span><br><span class="line">          this.next.className &#x3D; &#39;disabled&#39;</span><br><span class="line">        &#125;</span><br><span class="line">        this.next.innerHTML &#x3D; this.data.nextHTML</span><br><span class="line">        this.obj.appendChild(this.next)</span><br><span class="line"></span><br><span class="line">        n.backFn(n.current)</span><br><span class="line">      &#125;</span><br><span class="line">      Page.prototype.Event &#x3D; function () &#123;</span><br><span class="line">        console.log(this.obj);</span><br><span class="line">        var _this &#x3D; this</span><br><span class="line">        this.obj.onclick &#x3D; function (ev) &#123;</span><br><span class="line">          console.log(&#39;onclick&#39;);</span><br><span class="line">          var ev &#x3D; ev || window.event</span><br><span class="line">          var target &#x3D; ev.target || ev.srcElement</span><br><span class="line">          if (target.className &#x3D;&#x3D;&#x3D; &#39;tcdNumber&#39;) &#123;</span><br><span class="line">            _this.data.current &#x3D; Number(target.innerHTML)</span><br><span class="line">            _this.init(_this.data)</span><br><span class="line">          &#125; else if (target.className &#x3D;&#x3D;&#x3D; &#39;prevPage&#39;) &#123;</span><br><span class="line">            _this.data.current &#x3D; _this.data.current - 1</span><br><span class="line">            _this.init(_this.data)</span><br><span class="line">          &#125; else if (target.className &#x3D;&#x3D;&#x3D; &#39;nextPage&#39;) &#123;</span><br><span class="line">            _this.data.current &#x3D; _this.data.current + 1</span><br><span class="line">            _this.init(_this.data)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      &#x2F;&#x2F;应用 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">      new Page(document.getElementById(&#39;div2&#39;), &#123;</span><br><span class="line">        pageCount: 10,</span><br><span class="line">        current: 1,</span><br><span class="line">        backFn: function (p) &#123;</span><br><span class="line">          console.log(&#39;回调：&#39; + p)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">  &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分页 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MVVM</title>
      <link href="/2022/10/11/MVVM/"/>
      <url>/2022/10/11/MVVM/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/mvvm/mvc-mvvm.jpg" alt="mvvm"></p><a id="more"></a><h2 id="MVC（单向通信）"><a href="#MVC（单向通信）" class="headerlink" title="MVC（单向通信）"></a>MVC（单向通信）</h2><p>M——model模型，获取数据，处理数据逻辑。<br>V——view视图，处理数据显示。<br>C——Controller控制器，从视图读取数据，控制用户输入，并向模型发送数据</p><blockquote><p>在MVC设计模式中， Model 响应用户请求并返回响应数据，View 负责格式化数据并把它们呈现给用户，业务逻辑和表示层分离，同一个 Model 可以被不同的 View 重用，所以大大提高了代码的可重用性。<br>MVC模式的三个模块相互独立，改变其中一个不会影响其他两个，所以依据这种设计思想能构造良好的少互扰性的构件。<br>Controller 提高了应用程序的灵活性和可配置性。</p></blockquote><h2 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h2><h3 id="出现缘由"><a href="#出现缘由" class="headerlink" title="出现缘由"></a>出现缘由</h3><p>&ensp;&ensp;&ensp;&ensp;随着前端项目越来越大，项目的可维护性、可扩展性和安全性等成了主要问题，之前的浏览器兼容性问题已经退居其次。当年典型的类库如jquery，只能解决浏览器兼容性问题，但没有实现对业务逻辑的分成，所以维护性和扩展性较差，这才有了MVVM模式一类框架的出现<br><strong>Model 层:</strong></p><blockquote><p>对应数据层的域模型，它主要做域模型的同步。通过 Ajax/fetch 等 API 完成客户端和服务端业务 Model 的同 步。在层间关系⾥，它主要⽤于抽象出 ViewModel 中视图的 Model 。</p></blockquote><p><strong>View 层:</strong></p><blockquote><p>作为视图模板存在，在 MVVM ⾥，整个 View 是⼀个动态模板。除了定义结构、布局外，它展示的是 ViewModel 层的数据和状态。 View 层不负责处理状态， View 层做的是数据绑定的声明、 指令的声明、 事件绑定的声明。</p></blockquote><p><strong>ViewModel 层:</strong></p><blockquote><p>把 View 需要的层数据暴露，并对 View 层的数据绑定声明、 指令声明、 事件绑定声明负责，也就是处理 View 层的具体业务逻辑。ViewModel 底层会做好绑定属性的监听。当 ViewModel 中数据变化， View 层会得到更新；⽽当 View 中声明了数据的双向绑定（通常是表单元素），框架也会监听 View 层（表单）值的变化。⼀旦值变化，View 层绑定的 ViewModel 中的数据也会得到⾃动更新。</p></blockquote><p><mark>M和V不能直接通信，只能通过VM（通过双向数据绑定把 View 层和 Model 层连接起来）。</mark>VM要实现一个observer观察者，VM监听到数据变化时，通知视图做自动更新；VM监听到用户操作的视图的变化，会通知数据做改动，从而实现数据的双向绑定。</p><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><blockquote><p><strong>优点：</strong></p><blockquote><ul><li>分离视图（View）和模型（ Model ） , 降低代码耦合，提⾼视图或者逻辑的重⽤性。</li><li>提⾼可测试性 : ViewModel 的存在可以帮助开发者更好地编写测试代码。</li><li>⾃动更新 dom: 利⽤双向绑定 , 数据更新后视图⾃动更新 </li></ul></blockquote></blockquote><blockquote><p><strong>缺点：</strong></p><blockquote><ul><li>Bug 很难被调试 : 因为使⽤双向绑定的模式，当你看到界⾯异常了，有可能是你 View 的代码有 Bug ，也可能是 Model 的代码有问题。数据绑定使得⼀个位置的Bug 被快速传递到别的位置，要定位原始出问题的地⽅就变得不那么容易了。另外，数据绑定的声明是指令式地写在View 的模版当中的，这些内容是没办法去打断点 debug 的。</li><li>⼀个⼤的模块中 model 也会很⼤，虽然使⽤⽅便了也很容易保证了数据的⼀致性，当时⻓期持有，不释放内存就造成了花费更多的内存。</li><li>对于⼤型的图形应⽤程序，视图状态较多， ViewModel 的构建和维护的成本都会⽐较⾼。</li></ul></blockquote></blockquote><h3 id="双向绑定的核心：-Object-defineProperty"><a href="#双向绑定的核心：-Object-defineProperty" class="headerlink" title="双向绑定的核心： Object.defineProperty()"></a>双向绑定的核心： Object.defineProperty()</h3><p>Object.defineProperty(obj, prop, descriptor) 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。</p><blockquote><p>obj：要定义属性的对象<br>prop：要定义或修改的属性的名称或 Symbol<br>descriptor：要定义或修改的属性描述符<br>返回值：被传递给函数的对象</p></blockquote><p>通过Object.defineProperty的get方法用来获取值 set方法用来拦截设置值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var obj &#x3D; &#123;&#125;;  &#x2F;&#x2F;定义一个空对象</span><br><span class="line">Object.defineProperty(obj, &#39;val&#39;, &#123;&#x2F;&#x2F;定义要修改对象的属性</span><br><span class="line">get: function () &#123;</span><br><span class="line">console.log(&#39;获取对象的值&#39;)</span><br><span class="line">&#125;,</span><br><span class="line">set: function (newVal) &#123; </span><br><span class="line">console.log(&#39;设置对象的值：最新的值是&#39;+newVal);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">obj.hello &#x3D; &#39;hello&#39;</span><br></pre></td></tr></table></figure><p>js通过Object.defineProperty方法简单的实现双向绑定</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge&quot;&gt;</span><br><span class="line">&lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">&lt;title&gt;Document&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;span id&#x3D;&quot;childSpan&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var obj &#x3D; &#123;&#125;</span><br><span class="line">var initValue&#x3D;&#39;初始值&#39;</span><br><span class="line">Object.defineProperty(obj,&#39;initValue&#39;,&#123;</span><br><span class="line">get()&#123;</span><br><span class="line">console.log(&#39;获取obj最新的值&#39;);</span><br><span class="line">return initValue</span><br><span class="line">&#125;,</span><br><span class="line">set(newVal)&#123;</span><br><span class="line">initValue &#x3D; newVal</span><br><span class="line">console.log(&#39;设置最新的值&#39;);</span><br><span class="line">&#x2F;&#x2F; 获取到最新的值  然后将最新的值赋值给我们的span</span><br><span class="line">document.getElementById(&#39;childSpan&#39;).innerHTML &#x3D; initValue</span><br><span class="line">console.log(obj.initValue);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">document.addEventListener(&#39;keyup&#39;, function (e) &#123;</span><br><span class="line">obj.initValue &#x3D; e.target.value; &#x2F;&#x2F;监听文本框里面的值 获取最新的值 然后赋值给obj </span><br><span class="line">&#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h3 id="双向绑定过程"><a href="#双向绑定过程" class="headerlink" title="双向绑定过程"></a>双向绑定过程</h3><p><strong>1、初步了解四个东西:</strong></p><ul><li>0bserver监听器——监听data选项中属性是被访问或被改变，决定调用getter/setter。</li><li>Compile指令解析器——解析元素节点的指令，初始化视图，订阅watcher来更新视图。</li><li>Watcher订阅者——是Observer和Compile的桥梁，订阅并收到属性变动通知，执行指令绑定的相应回调函数。</li><li>Dep消息订阅器——它的内部有一个用来收集订阅者的数组，数据变动触发notify函数，再调用订阅者的update方法。</li></ul><p><strong>2、如何实现双向绑定</strong><br>（1）初始化阶段:</p><ul><li>监听：Observer把js对象传给vue实例的data选项，vue遍历data选项中的属性，并用Object.defineProperty()方法将这些属性转成setter/getter方法，实现监听功能;</li><li>Compile指令编译器，解析元素节点的指令，初始化视图，并订阅Watcher来更新视图;</li><li>watcher将自己添加到消息订阅器Dep，初始化完毕。</li></ul><p>（2）数据变化时:</p><ul><li>Observer中的setter方法被触发, setter调用Dep.notify();</li><li>Dep开始遍历所有订阅者，并调用订阅者的update方法;</li><li>订阅者收到通知后，更新视图。</li></ul><h3 id="双向绑定过程图解"><a href="#双向绑定过程图解" class="headerlink" title="双向绑定过程图解"></a>双向绑定过程图解</h3><p><img src="/img/mvvm/mvvm.jpg" alt="mvvm"></p><h4 id="任务拆分："><a href="#任务拆分：" class="headerlink" title="任务拆分："></a>任务拆分：</h4><ul><li>将vue实例中的数据渲染到页面上</li><li>将页面上的数据变更同步到vue实例中</li><li>vue实例中data数据变更，页面上数据同步变更</li></ul>]]></content>
      
      
      <categories>
          
          <category> MVVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MVVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VDOM</title>
      <link href="/2022/04/07/VDOM/"/>
      <url>/2022/04/07/VDOM/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/vdom/vdom2.png" alt="vdom"></p><a id="more"></a><h3 id="什么是DOM？"><a href="#什么是DOM？" class="headerlink" title="什么是DOM？"></a>什么是DOM？</h3><p>Document Object Model(文档对象模型)，是为HTML和XML提供的API；<br>按照DOM的标准，HTML和XML都是以标签为结点构造的树结构，DOM将HTML和XML的相同的结构本质抽象出来，然后通过脚本语言，如Javascript，按照DOM里的模型标准访问和操作文档内容。</p><h3 id="什么是VDOM？"><a href="#什么是VDOM？" class="headerlink" title="什么是VDOM？"></a>什么是VDOM？</h3><p>虚拟DOM： virtual DOM ，用普通js对象来描述DOM结构，因为不是真实DOM，所以称之为虚拟DOM。</p><h3 id="VDOM和真实DOM的区别？"><a href="#VDOM和真实DOM的区别？" class="headerlink" title="VDOM和真实DOM的区别？"></a>VDOM和真实DOM的区别？</h3><p>VDOM是将真实的DOM的数据抽取出来，以对象的形式模拟树形结构:<br>真实DOM:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;p&gt;123&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>对应的virtual DOM（伪代码）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var Vnode &#x3D; &#123;</span><br><span class="line">    tag: &#39;div&#39;,</span><br><span class="line">    children: [</span><br><span class="line">        &#123; tag: &#39;p&#39;, text: &#39;123&#39; &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="虚拟DOM要解决的问题-："><a href="#虚拟DOM要解决的问题-：" class="headerlink" title="虚拟DOM要解决的问题 ："></a>虚拟DOM要解决的问题 ：</h3><ul><li>在react，vue等技术出现之前：<br>要改变页面展示的内容，只能通过遍历查询 dom 树的方式找到需要修改的 dom ，<br>然后修改样式行为或者结构，来达到更新 ui 的目的<br>相当消耗计算资源（每次查询 dom 几乎都需要遍历整颗 dom 树）</li><li>使用虚拟DOM（ js 对象）：每次 dom 的更改就变成了 js 对象的属性的更改，这样一来就能查找 js 对象的属性变化，要比查询 dom 树的性能开销小。<br>虚拟DOM就是为了 <strong>解决浏览器性能问题</strong> 而被设计出来的。</li></ul><h3 id="页面渲染过程："><a href="#页面渲染过程：" class="headerlink" title="页面渲染过程："></a>页面渲染过程：</h3><p>DOM树=》CSS树=》Render树<br><img src="/img/vdom/vdom3.png" alt="vdom"></p><h3 id="为什么操作-dom-性能开销大？"><a href="#为什么操作-dom-性能开销大？" class="headerlink" title="为什么操作 dom 性能开销大？"></a>为什么操作 dom 性能开销大？</h3><p>并不是查询 dom 树性能开销大，<br>原因：</p><ul><li>dom树的实现模块 和 js 模块 是分开的，这些跨模块的通讯增加了成本。</li><li>dom 操作引起的浏览器的回流和重绘，使得性能开销巨大。</li></ul><h3 id="举个例子："><a href="#举个例子：" class="headerlink" title="# 举个例子："></a># 举个例子：</h3><p>在一次操作中，需要更新10个DOM节点，浏览器收到第一个DOM请求后并不知道还有9次更新操作，因此会马上执行流程，最终执行10次。第一次计算完，紧接着下一个DOM更新请求，这个节点的坐标值就变了，前一次计算为无用功。计算DOM节点坐标值等都是白白浪费的性能。<br><strong>而虚拟DOM不会立即操作DOM，而是将这10次更新的diff内容保存到本地一个JS对象中，最终将这个JS对象一次性附到DOM树上，再进行后续操作，避免大量无谓的计算量</strong></p><h3 id="diff算法："><a href="#diff算法：" class="headerlink" title="diff算法："></a>diff算法：</h3><p>这里修改某个数据，如果直接渲染到真实dom上会引起整个dom树的重绘和重排，通过diff算法定位出需要修改（值变化）的地方<br>在采取diff算法比较新旧节点的时候，比较只会在同层级进行, 不会跨层级比较。<br><img src="/img/vdom/vdom4.png" alt="vdom"></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> VDOM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VDOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js事件循环</title>
      <link href="/2021/12/27/js%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/"/>
      <url>/2021/12/27/js%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/</url>
      
        <content type="html"><![CDATA[<p>JS 单线程语言：指的是 javascript 引擎（如V8）在同一时刻只能处理一个任务；<br>事件循环唯一，可有多个队列任务。</p><a id="more"></a><h4 id="任务队列-Event-Queue"><a href="#任务队列-Event-Queue" class="headerlink" title="任务队列( Event Queue )"></a>任务队列( Event Queue )</h4><blockquote><p>所有的任务可以分为同步任务和异步任务，同步任务，顾名思义，就是立即执行的任务，同步任务一般会直接进入到主线程中执行；而异步任务，就是异步执行的任务，比如ajax网络请求，setTimeout 定时函数等都属于异步任务，异步任务会通过任务队列的机制(先进先出的机制)来进行协调。</p></blockquote><h4 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h4><p><strong>同步和异步任务分别进入不同的执行环境，同步的进入主线程，即主执行栈，异步的进入任务队列。主线程内的任务执行完毕为空，会去任务队列读取对应的任务，推入主线程执行。 上述过程的不断重复就是我们说的 Event Loop (事件循环)。</strong><br><img src="/img/event-loop/loop1.png" alt="事件循环"></p><p>在事件循环中，每进行一次循环操作称为tick，每一次 tick 的任务处理模型是比较复杂的，其关键的步骤可以总结如下：</p><ol><li>执行一个宏任务（栈中没有就从事件队列中获取）</li><li>执行过程中如果遇到微任务，就将它添加到微任务的任务队列中</li><li>宏任务执行完毕后，立即执行当前微任务队列中的所有微任务（依次执行）</li><li>当前宏任务执行完毕，开始检查渲染，然后GUI线程接管渲染/(render渲染)</li><li>渲染完毕后，JS线程继续接管，开始下一个宏任务（从事件队列中获取）<br><img src="/img/event-loop/loop2.png" alt="tick"></li></ol><p><strong>宏任务主要包含：script( 整体代码)、setTimeout、setInterval、I/O、UI 交互事件、setImmediate(Node.js 环境)</strong><br><strong>微任务主要包含：Promise、MutaionObserver、process.nextTick(Node.js 环境)</strong></p><p>另外：</p><ul><li>new promise本身是同步的；</li><li>await阻塞后面的代码执行，因此跳出async函数执行下一个微任务（<u>实际上await是一个让出线程的标志。await后面的表达式会先执行一遍，将await后面的代码加入到microtask中，然后就会跳出整个async函数来执行后面的代码</u>）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">async function async1() &#123;</span><br><span class="line">    console.log(&#39;async1 start&#39;);</span><br><span class="line">    await async2();</span><br><span class="line">    console.log(&#39;async1 end&#39;);</span><br><span class="line">&#125;</span><br><span class="line">async function async2() &#123;</span><br><span class="line">console.log(&#39;async2&#39;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(&#39;script start&#39;);</span><br><span class="line"></span><br><span class="line">setTimeout(function() &#123;</span><br><span class="line">    console.log(&#39;setTimeout&#39;);</span><br><span class="line">&#125;, 0)</span><br><span class="line"></span><br><span class="line">async1();</span><br><span class="line"></span><br><span class="line">new Promise(function(resolve) &#123;</span><br><span class="line">    console.log(&#39;promise1&#39;);</span><br><span class="line">    resolve();</span><br><span class="line">&#125;).then(function() &#123;</span><br><span class="line">    console.log(&#39;promise2&#39;);</span><br><span class="line">&#125;);</span><br><span class="line">console.log(&#39;script end&#39;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">script start</span><br><span class="line">async1 start</span><br><span class="line">async2</span><br><span class="line">promise1</span><br><span class="line">script end</span><br><span class="line">async1 end</span><br><span class="line">promise2</span><br><span class="line">setTimeout</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 事件循环 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue之派发与广播-dispatch与broadcast</title>
      <link href="/2021/10/18/broadcast%E5%92%8Cdispatch/"/>
      <url>/2021/10/18/broadcast%E5%92%8Cdispatch/</url>
      
        <content type="html"><![CDATA[<h4 id="主要针对组件之间的跨级通信"><a href="#主要针对组件之间的跨级通信" class="headerlink" title="主要针对组件之间的跨级通信"></a>主要针对组件之间的跨级通信</h4><a id="more"></a><h4 id="为什么不使用bus"><a href="#为什么不使用bus" class="headerlink" title="为什么不使用bus?"></a>为什么不使用bus?</h4><p>eventBus，方便易用，可在你想组合的组件之间随意使用，甚至没有级别关系的组件，只要在一个组件系统中，就可以通信。但是，如果你想完成一个通用组件，而且它有专用的子级组件。当页面多次使用这个组件时，eventBus在触发时就会发生混乱。这时，就需要一个指代父子关系的约束。<strong>（主要用于兄弟组件通信）</strong></p><h4 id="为什么不使用provide与inject"><a href="#为什么不使用provide与inject" class="headerlink" title="为什么不使用provide与inject?"></a>为什么不使用provide与inject?</h4><p>因为它的使用场景，主要是子组件获取上级组件的状态，跨级组件间建立了一种主动提供与依赖注入的关系。<br>然后有两种场景它不能很好的解决：</p><ul><li>父组件向子组件（跨级）传递数据；</li><li>子组件向父组件（跨级）传递数据。</li></ul><h4 id="emitter-js"><a href="#emitter-js" class="headerlink" title="emitter.js"></a>emitter.js</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; broadcast(广播)，向下冒泡</span><br><span class="line">&#x2F;&#x2F; dispatch(派发)，向上冒泡</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function broadcast(componentName, eventName, params) &#123;</span><br><span class="line">  this.$children.forEach(child &#x3D;&gt; &#123;</span><br><span class="line">    const name &#x3D; child.$options.name;</span><br><span class="line"></span><br><span class="line">    if (name &#x3D;&#x3D;&#x3D; componentName) &#123;</span><br><span class="line">      child.$emit.apply(child, [eventName].concat(params));</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      &#x2F;&#x2F; todo 如果 params 是空数组，接收到的会是 undefined</span><br><span class="line">      broadcast.apply(child, [componentName, eventName].concat([params]));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">export default &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    dispatch(componentName, eventName, params) &#123;</span><br><span class="line">      let parent &#x3D; this.$parent || this.$root;</span><br><span class="line">      let name &#x3D; parent.$options.name;</span><br><span class="line"></span><br><span class="line">      while (parent &amp;&amp; (!name || name !&#x3D;&#x3D; componentName)) &#123;</span><br><span class="line">        parent &#x3D; parent.$parent;</span><br><span class="line"></span><br><span class="line">        if (parent) &#123;</span><br><span class="line">          name &#x3D; parent.$options.name;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      if (parent) &#123;</span><br><span class="line">        parent.$emit.apply(parent, [eventName].concat(params));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    broadcast(componentName, eventName, params) &#123;</span><br><span class="line">      broadcast.call(this, componentName, eventName, params);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="父子组件"><a href="#父子组件" class="headerlink" title="父子组件"></a>父子组件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">parent.vue</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div @click&#x3D;&quot;emitClick&quot;&gt;emitter&lt;&#x2F;div&gt;</span><br><span class="line">&lt;chlidone&gt;&lt;&#x2F;chlidone&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import emitterMixin from &quot;@&#x2F;mixins&#x2F;emitterMixin.js&quot;;</span><br><span class="line">import chlidone from &#39;.&#x2F;chlidone.vue&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;parent&quot;,</span><br><span class="line">  mixins: [emitterMixin],</span><br><span class="line">  components: &#123; chlidone &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    this.$on(&quot;toParent&quot;, this.handleChild);</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleChild(val) &#123;</span><br><span class="line">      alert(val);</span><br><span class="line">    &#125;,</span><br><span class="line">    emitClick()&#123;</span><br><span class="line">        this.broadcast(&quot;chlidone&quot;, &quot;toChild&quot;, &quot;向下冒泡&quot;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; child</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div @click&#x3D;&quot;childClick&quot;&gt;23333&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import emitterMixin from &quot;@&#x2F;mixins&#x2F;emitterMixin.js&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;chlidone&quot;,</span><br><span class="line">  mixins: [emitterMixin],</span><br><span class="line">  data() &#123;</span><br><span class="line">    return&#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    this.$on(&quot;toChild&quot;, this.handleChild);</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    childClick()&#123;</span><br><span class="line">      this.dispatch(&quot;parent&quot;, &quot;toParent&quot;, &quot;向上冒泡&quot;);</span><br><span class="line">    &#125;,</span><br><span class="line">    handleChild(val) &#123;</span><br><span class="line">      alert(val);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>这样就能实现跨级组件自定义通信了，但是，要注意其中一个问题：订阅必须先于发布，也就是说先有on再有emit。</p><h4 id="父子组件渲染顺序，实例创建顺序"><a href="#父子组件渲染顺序，实例创建顺序" class="headerlink" title="父子组件渲染顺序，实例创建顺序"></a>父子组件渲染顺序，实例创建顺序</h4><p>子组件先于父组件前渲染，所以在子组的mounted派发事件时，在父组件中的mounte中是监听不到的。<br>而父组件的create是先于子组件的，所以可以在父组件中的create可以监听到</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> broadcast </tag>
            
            <tag> dispatch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端代码规范</title>
      <link href="/2021/07/02/%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
      <url>/2021/07/02/%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<p>前端开发有很多痛苦，也有很多乐趣，自己要学习的地方还有很多，得跟随潮流保持学习状态不断更新自己的技术栈，根据之前看过的文章和自己平时遇到的总结了下前端规范，时刻提醒自己注意代码规范。（VUE）</p><a id="more"></a><h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h3><ul><li>camelCase（小驼峰式命名法 —— 首字母小写）</li><li>PascalCase（大驼峰式命名法 —— 首字母大写）</li><li>kebab-case（短横线连接式）</li><li>Snake（下划线连接式）</li></ul><h3 id="文件-文件夹命名规范"><a href="#文件-文件夹命名规范" class="headerlink" title="文件/文件夹命名规范"></a>文件/文件夹命名规范</h3><h4 id="非组件文件或文件夹的命名遵循以下原则-kebab-case-："><a href="#非组件文件或文件夹的命名遵循以下原则-kebab-case-：" class="headerlink" title="非组件文件或文件夹的命名遵循以下原则(kebab-case)："></a>非组件文件或文件夹的命名遵循以下原则(kebab-case)：</h4><ul><li>index.js(js)、index.css(css) 或者 index.vue(html)，统一使用小写字母开头的(kebab-case)命名规范</li><li>展开node_modules中的项目依赖，会发现，几乎所有的项目文件夹命名都是 kebab-case命名的，使用kebab-case命名的文件夹比camelCase命名的文件夹看起来更清晰</li></ul><h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><ul><li>命名方法：全部大写下划线分割</li><li>命名规范：使用大写字母和下划线来组合命名，下划线用以分割单词<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const MAX_COUNT &#x3D; 10</span><br><span class="line">const URL &#x3D; &#39;http:&#x2F;&#x2F;test.host.com&#39;</span><br></pre></td></tr></table></figure><h4 id="变量、方法"><a href="#变量、方法" class="headerlink" title="变量、方法"></a>变量、方法</h4></li><li>camelCase(小驼峰)命名<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let text&#x3D;&#39;toText&#39;</span><br><span class="line">toGo()&#123;&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="组件命名（PascalCase）"><a href="#组件命名（PascalCase）" class="headerlink" title="组件命名（PascalCase）"></a>组件命名（PascalCase）</h4><h5 id="组件规范"><a href="#组件规范" class="headerlink" title="组件规范"></a>组件规范</h5><ul><li>多个单词组合，（PascalCase），避免与html冲突<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">AppMain.vue</span><br><span class="line"></span><br><span class="line">components: &#123;</span><br><span class="line">  AppMain</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 调用</span><br><span class="line">&lt;app-main&gt;&lt;&#x2F;app-main&gt;</span><br></pre></td></tr></table></figure></li><li>公共组件（多个调用）放置于外层components</li><li>单个复杂文件，可在该文件下创建子组件</li><li>和父组件紧密契合的子组件以父组件名为前缀名</li><li>Props(camelCase小驼峰)定义应该尽量详细<ol><li>命名：驼峰命名</li><li>必须指定类型</li><li>加上require或者 default，两者二选一</li><li>加上注释，表明其含义</li><li>如果业务需要，加上 validator验证<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line"> &#x2F;&#x2F; 部门id</span><br><span class="line"> deptId: &#123;</span><br><span class="line">  type: String,</span><br><span class="line">  required: false,</span><br><span class="line">  default: () &#x3D;&gt; null</span><br><span class="line"> &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 数组形式  确保对应，无默认值等</span><br><span class="line">props: [&#39;deptId&#39;]</span><br></pre></td></tr></table></figure><h5 id="components文件夹："><a href="#components文件夹：" class="headerlink" title="components文件夹："></a>components文件夹：</h5></li></ol></li><li>全局通用的组件放在 /src/components下</li><li>其他业务页面中的组件，放在各自页面下的 ./components文件夹下</li><li>每个components文件夹下最多只有一层文件夹，且文件夹名称为组件的名称，文件夹下必须有index.vue或index.js，其他.vue文件统一大写开头（PascalCase），components下的子文件夹名称统一大写开头（PascalCase）</li></ul><h3 id="other"><a href="#other" class="headerlink" title="other"></a>other</h3><ul><li>样式使用 scoped 特性</li><li>v-for 应该避免与 v-if 在同一个元素上使用，因为 v-for 的优先级比 v-if 更高，为了避免无效计算和渲染，应该尽量将 v-if 放到容器的父元素之上</li><li>vue中v-for带上 key 值使更新 DOM 时渲染效率更高</li><li>vue中v-for为什么不能用index作为key<ol><li>更新DOM的时候会出现性能问题</li><li>会发生一些状态bug</li></ol></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scss与less</title>
      <link href="/2021/04/29/scss%E4%B8%8Eless/"/>
      <url>/2021/04/29/scss%E4%B8%8Eless/</url>
      
        <content type="html"><![CDATA[<p>scss和less都属于css预处理器（css编程语言，编译后为正常css文件供项目使用）。相比较个人更倾向于scss,所以着重记录下两者主要区别：</p><a id="more"></a><h4 id="为什么使用css预处理器"><a href="#为什么使用css预处理器" class="headerlink" title="为什么使用css预处理器"></a>为什么使用css预处理器</h4><h5 id="css缺点"><a href="#css缺点" class="headerlink" title="css缺点"></a>css缺点</h5><ul><li>css仅仅是标记语言，而非编程语言。不能像js那样定义变量、可引用等</li><li>语法不够强大，无法嵌套书写，导致模块化会有很多重复代码</li><li>没有变量和合理的样式复用机制，重复过多之后，难以维护</li></ul><h4 id="sass和less的比较："><a href="#sass和less的比较：" class="headerlink" title="sass和less的比较："></a>sass和less的比较：</h4><h5 id="不同之处"><a href="#不同之处" class="headerlink" title="不同之处"></a>不同之处</h5><ol><li>less环境较scss简单<ul><li>scss基于Ruby环境在服务器端处理，也就是需要安装Ruby环境（面向对象脚本语言，别的不知道，，）。</li><li>less基于js在浏览器端处理，也就是在页面中引入less.js便可直接是使用。</li></ul></li><li>less使用较scss简单<ul><li>less没有裁剪css原有特性，实在现有基础上加入一些编程语言的特性。所以只要会css，less很容易上手。</li></ul></li><li>从功能出发，sass比less略强大一些（具体就自行比较吧）<ul><li><a href="https://www.sass.hk/docs/" target="_blank" rel="noopener">scss中文网</a></li><li><a href="http://lesscss.cn/" target="_blank" rel="noopener">less中文网</a></li></ul></li><li>less与sass处理机制不一样<ul><li>前者是通过客户端处理的，后者是通过服务端处理，相比较之下前者解析会比后者慢一点</li></ul></li></ol><h5 id="相同之处"><a href="#相同之处" class="headerlink" title="相同之处"></a>相同之处</h5><ol><li>混入(Mixins)——class中的class；</li><li>参数混入——可以传递参数的class，就像函数一样；</li><li>嵌套规则——Class中嵌套class，从而减少重复的代码；</li><li>运算——CSS中用上数学；</li><li>颜色功能——可以编辑颜色；</li><li>名字空间(namespace)——分组样式，从而可以被调用；</li><li>作用域——局部修改样式；</li><li>JavaScript 赋值——在CSS中使用JavaScript表达式赋值。</li></ol><h4 id="为什么选择使用scss"><a href="#为什么选择使用scss" class="headerlink" title="为什么选择使用scss"></a>为什么选择使用scss</h4><ol><li>Sass在市面上有一些成熟的框架，比如说Compass，而且有很多框架也在使用Sass，比如说Foundation。</li><li>就国外讨论的热度来说，Sass绝对优于LESS。</li><li>就学习教程来说，Sass的教程要优于LESS。在国内LESS集中的教程是LESS中文官网，而Sass的中文教程，慢慢在国内也较为普遍。</li><li>Sass也是成熟的CSS预处理器之一，而且有一个稳定，强大的团队在维护。</li><li>同时还有Scss对sass语法进行了改良，Sass 3就变成了Scss(sassy css)。与原来的语法兼容，只是用{}取代了原来的缩进。</li><li>bootstrap（Web框架）最新推出的版本4，使用的就是Sass。</li></ol>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>element表格倒计时</title>
      <link href="/2021/04/27/element%E8%A1%A8%E6%A0%BC%E5%80%92%E8%AE%A1%E6%97%B6/"/>
      <url>/2021/04/27/element%E8%A1%A8%E6%A0%BC%E5%80%92%E8%AE%A1%E6%97%B6/</url>
      
        <content type="html"><![CDATA[<p>element动态表格数据倒计时处理。。。</p><a id="more"></a><h4 id="表格渲染倒计时："><a href="#表格渲染倒计时：" class="headerlink" title="表格渲染倒计时："></a>表格渲染倒计时：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; nowtime 获取进入页面的当前时间戳</span><br><span class="line">&#x2F;&#x2F; 放入computed中！！</span><br><span class="line">&#123;&#123;scope.row.time|countdown(nowtime)&#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="filters过滤："><a href="#filters过滤：" class="headerlink" title="filters过滤："></a>filters过滤：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">filters:&#123;</span><br><span class="line">    countdown(end, nowtime) &#123;</span><br><span class="line">      var mistiming &#x3D; end - nowtime &#x2F;&#x2F;   获取截止时间距离现在的毫秒差</span><br><span class="line">      if(mistiming&gt;0)&#123;</span><br><span class="line">        var days &#x3D; Math.floor(mistiming &#x2F; 1000 &#x2F; 60 &#x2F; 60 &#x2F; 24); &#x2F;&#x2F;获取天数</span><br><span class="line">        var hours &#x3D; Math.floor(mistiming &#x2F; 1000 &#x2F; 60 &#x2F; 60 % 24); &#x2F;&#x2F; 获取小时</span><br><span class="line">        var minutes &#x3D; Math.floor(mistiming &#x2F; 1000 &#x2F; 60 % 60); &#x2F;&#x2F;获取分钟数</span><br><span class="line">        var seconds &#x3D; Math.floor(mistiming &#x2F; 1000 % 60)+1; &#x2F;&#x2F;获取秒数</span><br><span class="line">        days &lt; 10 ? days &#x3D; &quot;0&quot; + days : days;</span><br><span class="line">        hours &lt; 10 ? hours &#x3D; &quot;0&quot; + hours : hours;</span><br><span class="line">        minutes &lt; 10 ? minutes &#x3D; &quot;0&quot; + minutes : minutes;</span><br><span class="line">        seconds &lt; 10 ? seconds &#x3D; &quot;0&quot; + seconds : seconds;</span><br><span class="line">        var rels &#x3D; &#96;$&#123;days&#125;天$&#123;hours&#125;时$&#123;minutes&#125;分$&#123;seconds&#125;秒&#96;</span><br><span class="line">      &#125;</span><br><span class="line">      &#x2F;&#x2F; 判断是否到截止时间</span><br><span class="line">      var mis &#x3D; mistiming &gt; 0 ? rels : &quot;已截止&quot;</span><br><span class="line">      return mis</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="created表格加入定时器："><a href="#created表格加入定时器：" class="headerlink" title="created表格加入定时器："></a>created表格加入定时器：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">this.tableData.forEach(el&#x3D;&gt;&#123;</span><br><span class="line">    this.daojishi(el);&#x2F;&#x2F;调用定时器</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="倒计时定时器："><a href="#倒计时定时器：" class="headerlink" title="倒计时定时器："></a>倒计时定时器：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">daojishi(row) &#123;</span><br><span class="line">    row.countDown &#x3D; setInterval(() &#x3D;&gt; &#123;</span><br><span class="line">    if(row.time&gt;0)&#123;</span><br><span class="line">        row.time &#x3D; row.time - 1000;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        clearInterval(row.countDown)</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>最后就是离开页面销毁前清除定时器即可。</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> element </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 倒计时 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器输入url到显示页面的过程</title>
      <link href="/2020/12/11/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BE%93%E5%85%A5url%E5%88%B0%E6%98%BE%E7%A4%BA%E9%A1%B5%E9%9D%A2%E7%9A%84%E8%BF%87%E7%A8%8B/"/>
      <url>/2020/12/11/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BE%93%E5%85%A5url%E5%88%B0%E6%98%BE%E7%A4%BA%E9%A1%B5%E9%9D%A2%E7%9A%84%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>&ensp;&ensp;&ensp;&ensp;在上网过程中，常常会在浏览器中输入各种各样的URL或者网址，然后浏览器就会渲染出对应的网页。其实从输入URL到页面展示在我们眼前所经历的过程其实还是非常复杂的，其中很多知识都会有专门的学科去研究，所以这里只是简单地概括一下大致流程：</p><a id="more"></a><ul><li>DNS解析</li><li>TCP链接（三次挥手）</li><li>HTTP请求</li><li>服务器处理HTTP</li><li>页面渲染</li><li>断开TCP链接（四次挥手）</li></ul><h2 id="DNS解析"><a href="#DNS解析" class="headerlink" title="DNS解析"></a>DNS解析</h2><p>&ensp;&ensp;&ensp;&ensp;DNS域名解析，说白了就是查询的过程。从所输入的url中通过一定方式查询到所处的IP地址。</p><h2 id="TCP链接（三次握手）"><a href="#TCP链接（三次握手）" class="headerlink" title="TCP链接（三次握手）"></a>TCP链接（三次握手）</h2><ul><li>客服端向服务器发送请求报文，等待确认</li><li>服务器确定请求报文，并向客户端发送确认信息</li><li>客服端向服务器发送确认信息，与服务器建立连接</li></ul><h2 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h2><p>&ensp;&ensp;&ensp;&ensp;一个HTTP请求报文由请求行、请求头、请求正文组成。</p><h2 id="服务器处理HTTP"><a href="#服务器处理HTTP" class="headerlink" title="服务器处理HTTP"></a>服务器处理HTTP</h2><p>&ensp;&ensp;&ensp;&ensp;服务器端响应HTTP请求，浏览器得到HTML代码。这里HTTP响应报文返回状态码、响应头和响应体。</p><h2 id="页面渲染"><a href="#页面渲染" class="headerlink" title="页面渲染"></a>页面渲染</h2><h3 id="这里说一下浏览器渲染机制："><a href="#这里说一下浏览器渲染机制：" class="headerlink" title="这里说一下浏览器渲染机制："></a>这里说一下浏览器渲染机制：</h3><ol><li>识别标签</li><li>标签转成Node节点，生成DOM树</li><li>CSS解析，生成CSSOM树</li><li>Render Tree（渲染树）：DOM和CSSOM合并后生成<ul><li>重绘（修改外观样式）</li><li>回流（布局或几何属性的修改）</li><li>回流的代价要远大于重绘。且回流必然会造成重绘，但重绘不一定会造成回流</li></ul></li></ol><h2 id="断开TCP链接（四次挥手）"><a href="#断开TCP链接（四次挥手）" class="headerlink" title="断开TCP链接（四次挥手）"></a>断开TCP链接（四次挥手）</h2><ul><li>客服端向服务器发送关闭请求</li><li>服务器确认接收请求，向客户端返回准备断开信息</li><li>服务器断开连接，向客户端发送断开信息</li><li>客户端发回报文确认</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>share and save</title>
      <link href="/2020/10/11/share/"/>
      <url>/2020/10/11/share/</url>
      
        <content type="html"><![CDATA[<p>&ensp;&ensp;&ensp;&ensp;使用uniapp制作微信小程序、或app（记载回顾）</p><ul><li>海报（后台生成）分享</li><li>保存图片到本地<a id="more"></a></li></ul><h3 id="分享"><a href="#分享" class="headerlink" title="分享"></a>分享</h3><h4 id="自带分享"><a href="#自带分享" class="headerlink" title="自带分享"></a>自带分享</h4><p>&ensp;&ensp;&ensp;&ensp;uniapp自带有分享功能（<a href="https://www.cnblogs.com/xuxiaoxia/p/8405076.html" target="_blank" rel="noopener">uniapp官网分享</a>），官网也比较简洁明了。</p><h4 id="手写分享"><a href="#手写分享" class="headerlink" title="手写分享"></a>手写分享</h4><p>&ensp;&ensp;&ensp;&ensp;用户自定义生成海报分享，上代码（请求接口返回生成海报图）。此处后台需要接收图片才能返回生成的海报图。</p><ul><li>接收base64<br>图片路径转base64，网上查找的方法，整合。<br>先把图片路径转为arraybuffer格式（二进制），再转为base64格式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">async toShare()&#123;</span><br><span class="line">    uni.showLoading(&#123;</span><br><span class="line">        title: &quot;加载中&quot;</span><br><span class="line">    &#125;)</span><br><span class="line">    uni.request(&#123;</span><br><span class="line">　　　　url: imgUrl, &#x2F;&#x2F;图片路径</span><br><span class="line">　　　　method: &#39;GET&#39;,</span><br><span class="line">　　　　responseType: &#39;arraybuffer&#39;,</span><br><span class="line">　　　　success: async res &#x3D;&gt; &#123;</span><br><span class="line">　　　　　　let base64 &#x3D; wx.arrayBufferToBase64(res.data); &#x2F;&#x2F;把arraybuffer转成base64</span><br><span class="line">　　　　　　let toBase64Url &#x3D; &#39;data:image&#x2F;jpeg;base64,&#39; + base64; &#x2F;&#x2F;不加上这串字符，在页面无法显示</span><br><span class="line">            let data &#x3D; &#123;</span><br><span class="line">                img: toBase64Url</span><br><span class="line">            &#125;</span><br><span class="line">            let haibao &#x3D; await this.$api.imgShare(data)</span><br><span class="line">            &#x2F;&#x2F; 后台返回base64格式过长，存在换行、空格等</span><br><span class="line">            &#x2F;&#x2F; 接收海报图</span><br><span class="line">            this.ewmImg &#x3D; haibao.data.img.replace(&#x2F;[\r\n]&#x2F;g, &quot;&quot;)</span><br><span class="line">            uni.hideLoading()</span><br><span class="line">　　　　&#125;,</span><br><span class="line">        fail:err&#x3D;&gt;&#123;</span><br><span class="line">            uni.hideLoading();</span><br><span class="line">            this.$utils.toast(&#39;该内容不支持被分享&#39;);</span><br><span class="line">        &#125;</span><br><span class="line">　　&#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li>接收图片路径<br>这就简单了，拿到图片路径直接传给后台，接收生成海报就可以了。</li></ul><h3 id="保存图片至本地"><a href="#保存图片至本地" class="headerlink" title="保存图片至本地"></a>保存图片至本地</h3><p>&ensp;&ensp;&ensp;&ensp;图片保存uniapp上也有，这里做一个整合。<br>&ensp;&ensp;&ensp;&ensp;思路：就两步，首先判断是否授权，再就是保存。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">saveEwm() &#123;</span><br><span class="line">    let _self &#x3D; this;</span><br><span class="line">    &#x2F;&#x2F;获取相册授权</span><br><span class="line">    uni.getSetting(&#123;</span><br><span class="line">        success(res) &#123;</span><br><span class="line">            if (!res.authSetting[&#39;scope.writePhotosAlbum&#39;]) &#123;</span><br><span class="line">                uni.authorize(&#123;</span><br><span class="line">                    scope: &#39;scope.writePhotosAlbum&#39;,</span><br><span class="line">                    success() &#123;</span><br><span class="line">                        &#x2F;&#x2F;这里是用户同意授权后的回调</span><br><span class="line">                        _self.saveImgToLocal();</span><br><span class="line">                    &#125;,</span><br><span class="line">                    fail() &#123; </span><br><span class="line">                        &#x2F;&#x2F;这里是用户拒绝授权后的回调</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125; else &#123; &#x2F;&#x2F;用户已经授权过了</span><br><span class="line">                _self.saveImgToLocal();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br><span class="line">saveImgToLocal()&#123;</span><br><span class="line">    &#x2F;&#x2F; 指定图片的临时路径</span><br><span class="line">    const path &#x3D; &#96;$&#123;wx.env.USER_DATA_PATH&#125;&#x2F;share.png&#96;;</span><br><span class="line">    &#x2F;&#x2F; 获取小程序的文件系统</span><br><span class="line">    const fsm &#x3D; uni.getFileSystemManager();</span><br><span class="line">    &#x2F;&#x2F; 把arraybuffer数据写入到临时目录中</span><br><span class="line">    fsm.writeFile(&#123;</span><br><span class="line">        filePath: path,</span><br><span class="line">        data: this.ewmImg.replace(&#x2F;^data:image\&#x2F;\w+;base64,&#x2F;, &quot;&quot;),</span><br><span class="line">        encoding: &#39;base64&#39;,</span><br><span class="line">        &#x2F;&#x2F; encoding: &#39;binary&#39;,</span><br><span class="line">        success: (res)&#x3D;&gt;&#123;</span><br><span class="line">            &#x2F;&#x2F; 把临时路径下的图片，保存至相册</span><br><span class="line">            uni.saveImageToPhotosAlbum(&#123;</span><br><span class="line">            filePath: path,</span><br><span class="line">            success: res &#x3D;&gt; &#123;</span><br><span class="line">                uni.showToast(&#123;title: &#39;保存成功&#39;&#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">            fail: err &#x3D;&gt; &#123;uni.showToast(&#123;title: err&#125;)&#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> uniapp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分享 </tag>
            
            <tag> 保存图片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图片上传时位置替换</title>
      <link href="/2020/06/28/%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E6%97%B6%E4%BD%8D%E7%BD%AE%E6%9B%BF%E6%8D%A2/"/>
      <url>/2020/06/28/%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E6%97%B6%E4%BD%8D%E7%BD%AE%E6%9B%BF%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<p>&ensp;&ensp;&ensp;&ensp;针对上传图片时替换位置，大多数情况下的想法是把图片删除再重新上传，得到想要的顺序就行。然而，当提出上传回显后可以直接替换图片位置，仔细想了一下，貌似也是很合理的需求。<br>&ensp;&ensp;&ensp;&ensp;所以就有了接下来的爬坑之路（记载以便回顾）。。</p><a id="more"></a><h3 id="分析筛选"><a href="#分析筛选" class="headerlink" title="分析筛选"></a>分析筛选</h3><p>既然有要加的需求，那么就满足，加。<br>因为项目用的是iview，所以就去看了iview官方上传图片的组件，最后发现 没有直接替换图片位置的属性或者方法，这就有点头大了。<br>从网上百度的，发现element貌似有这个功能（没有实践），但是项目方面是iview，要是替换组件的话改动也有点大（麻烦）。所以就考虑再找找看，这个可以当成备用方案。<br>最后，找到了一种折中的方案，在原有的基础上加入一些方法（参考：<a href="https://www.cnblogs.com/xuxiaoxia/p/8405076.html" target="_blank" rel="noopener">div拖拽</a>）。</p><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><h4 id="图片上传（iview组件）"><a href="#图片上传（iview组件）" class="headerlink" title="图片上传（iview组件）"></a>图片上传（iview组件）</h4><p>这点可直接照搬iview，根据需要增删属性、方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;Upload</span><br><span class="line">    ref&#x3D;&quot;uploads&quot;</span><br><span class="line">    :show-upload-list&#x3D;&quot;false&quot;</span><br><span class="line">    :default-file-list&#x3D;&quot;DefaultLists&quot;</span><br><span class="line">    :on-success&#x3D;&quot;handleSuccesses&quot;</span><br><span class="line">    :format&#x3D;&quot;[&#39;jpg&#39;,&#39;jpeg&#39;,&#39;png&#39;]&quot;</span><br><span class="line">    :max-size&#x3D;&quot;10240&quot;</span><br><span class="line">    :on-format-error&#x3D;&quot;handleFormatErrors&quot;</span><br><span class="line">    :on-exceeded-size&#x3D;&quot;handleMaxSizes&quot;</span><br><span class="line">    :before-upload&#x3D;&quot;handleBeforeUploads&quot;</span><br><span class="line">    type&#x3D;&quot;drag&quot;</span><br><span class="line">    name&#x3D;&quot;image&quot;</span><br><span class="line">    :action&#x3D;&quot;UploadAction&quot;</span><br><span class="line">    style&#x3D;&quot;display: inline-block;width:160px;&quot;</span><br><span class="line">    &gt;</span><br><span class="line">    &lt;div style&#x3D;&quot;width: 160px;height:100px;line-height: 100px;&quot;&gt;</span><br><span class="line">        &lt;Icon type&#x3D;&quot;ios-camera&quot; size&#x3D;&quot;20&quot;&gt;&lt;&#x2F;Icon&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;Upload&gt;</span><br></pre></td></tr></table></figure><h4 id="图片回显"><a href="#图片回显" class="headerlink" title="图片回显"></a>图片回显</h4><p>实际就一个简单回显，不过在图片外层加了个div。（<strong>以下几个方法放入img标签中无效，需放入div中</strong>）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div</span><br><span class="line">        draggable&#x3D;&quot;true&quot;</span><br><span class="line">        @dragstart&#x3D;&quot;handleDragStart($event, item)&quot;</span><br><span class="line">        @dragover.prevent&#x3D;&quot;handleDragOver($event, item)&quot;</span><br><span class="line">        @dragenter&#x3D;&quot;handleDragEnter($event, item)&quot; </span><br><span class="line">        @dragend&#x3D;&quot;handleDragEnd($event, item)&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;img :src&#x3D;&quot;item.url&quot;  &#x2F;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;demo-upload-list-cover&quot;&gt;</span><br><span class="line">            &lt;Icon type&#x3D;&quot;ios-trash-outline&quot; @click.native&#x3D;&quot;handleRemoves(item)&quot;&gt;&lt;&#x2F;Icon&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><h4 id="js部分"><a href="#js部分" class="headerlink" title="js部分"></a>js部分</h4><p>加入上面div中定义的四个方法，至此 就已经实现了图片拖拽的效果（发现挺简单的）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">handleDragStart(e,item)&#123;</span><br><span class="line">    this.dragging &#x3D; item;</span><br><span class="line">&#125;,</span><br><span class="line">handleDragEnd(e,item)&#123;</span><br><span class="line">    this.dragging &#x3D; null</span><br><span class="line">&#125;,</span><br><span class="line">&#x2F;&#x2F;首先把div变成可以放置的元素，即重写dragenter&#x2F;dragover</span><br><span class="line">handleDragOver(e) &#123;</span><br><span class="line">    e.dataTransfer.dropEffect &#x3D; &#39;move&#39;&#x2F;&#x2F; e.dataTransfer.dropEffect&#x3D;&quot;move&quot;;&#x2F;&#x2F;在dragenter中针对放置目标来设置!</span><br><span class="line">&#125;,</span><br><span class="line">handleDragEnter(e,item)&#123;</span><br><span class="line">    e.dataTransfer.effectAllowed &#x3D; &quot;move&quot;&#x2F;&#x2F;为需要移动的元素设置dragstart事件</span><br><span class="line">    if(item &#x3D;&#x3D;&#x3D; this.dragging)&#123;</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    const newItems &#x3D; [...this.items]</span><br><span class="line">    console.log(newItems)</span><br><span class="line">    const src &#x3D; newItems.indexOf(this.dragging)</span><br><span class="line">    const dst &#x3D; newItems.indexOf(item)</span><br><span class="line"> </span><br><span class="line">    newItems.splice(dst, 0, ...newItems.splice(src, 1))</span><br><span class="line"> </span><br><span class="line">    this.items &#x3D; newItems</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="图片替换位置后删除"><a href="#图片替换位置后删除" class="headerlink" title="图片替换位置后删除"></a>图片替换位置后删除</h3><p>上面一完成还以为整个就改完了，奈何是我想多了。<br>图片替换位置后，再点击删除，发现没有任何动静，原有正常的删除也不生效了。改代码的心塞。<br>在原先的删除方法中仔细摸索修改，最终解决了问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">handleRemoves(file) &#123;</span><br><span class="line">      this.$refs.uploads.fileList.splice(this.$refs.uploads.fileList.indexOf(file), 1);</span><br><span class="line">      this.formItem.imgs_arr &#x3D; []  &#x2F;&#x2F;中转</span><br><span class="line">      this.uploadLists.forEach((el, index) &#x3D;&gt;&#123;</span><br><span class="line">          this.formItem.imgs_arr.push(el.url.split(&#39;img&#x2F;&#39;)[1])</span><br><span class="line">      &#125;)</span><br><span class="line">      var imgs_index &#x3D; 0    &#x2F;&#x2F; 获取点击删除图的索引</span><br><span class="line">      if (this.formItem.imgs_arr) &#123;</span><br><span class="line">        for(let i &#x3D; 0; i &lt; this.formItem.imgs_arr.length; i++)&#123;</span><br><span class="line">            if(file!&#x3D;undefined)&#123;</span><br><span class="line">                if(file.url &#x3D;&#x3D; config.front_url + &quot;uploads&#x2F;img&#x2F;&quot; + this.formItem.imgs_arr[i])&#123;</span><br><span class="line">                    imgs_index &#x3D; i;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; 通过splice方法删除指定下标</span><br><span class="line">        this.formItem.imgs_arr.splice(imgs_index, 1);</span><br><span class="line">        &#x2F;&#x2F; 接收字段</span><br><span class="line">        this.formItem.imgs &#x3D; this.formItem.imgs_arr;</span><br><span class="line">      &#125;</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F; 图片回显</span><br><span class="line">        this.uploadLists &#x3D; []</span><br><span class="line">        var lists &#x3D; []</span><br><span class="line">        if(this.formItem.imgs.length&gt;0)&#123;</span><br><span class="line">            for (var i &#x3D; 0; i &lt; this.formItem.imgs.length; i++) &#123;</span><br><span class="line">                lists  &#x3D; &#123;</span><br><span class="line">                    name: &quot;&quot;,</span><br><span class="line">                    url: config.front_url + &quot;uploads&#x2F;img&#x2F;&quot; + this.formItem.imgs[i],</span><br><span class="line">                    status: &#39;finished&#39; &#x2F;&#x2F; 判断是否显示</span><br><span class="line">                &#125;;</span><br><span class="line">                this.uploadLists.push(lists)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>这里整个改过之后的删除代码放过来了，主要是和定义的字段一一准确对应，其中逻辑可供参考。</p><h3 id="图片删除后再上传回显"><a href="#图片删除后再上传回显" class="headerlink" title="图片删除后再上传回显"></a>图片删除后再上传回显</h3><p>这里发现删除后再上传，显示成功但是无回显。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">handleSuccesses(res, file) &#123;</span><br><span class="line">  if (!this.formItem.imgs) &#123;</span><br><span class="line">    this.formItem.imgs &#x3D; [];</span><br><span class="line">  &#125;</span><br><span class="line">  file.url &#x3D; config.front_url + &quot;uploads&#x2F;img&#x2F;&quot; + res.data.fileName;</span><br><span class="line">  this.formItem.imgs.push(res.data.fileName);</span><br><span class="line">  </span><br><span class="line">    &#x2F;&#x2F; 上传手动回显</span><br><span class="line">    this.uploadLists &#x3D; []</span><br><span class="line">    var lists &#x3D; []</span><br><span class="line">    for (var i &#x3D; 0; i &lt; this.formItem.imgs.length; i++) &#123;</span><br><span class="line">        lists  &#x3D; &#123;</span><br><span class="line">            name: &quot;&quot;,</span><br><span class="line">            url: config.front_url + &quot;uploads&#x2F;img&#x2F;&quot; + this.formItem.imgs[i],</span><br><span class="line">            status: &#39;finished&#39;</span><br><span class="line">        &#125;;</span><br><span class="line">        this.uploadLists.push(lists)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="图片只替换位置"><a href="#图片只替换位置" class="headerlink" title="图片只替换位置"></a>图片只替换位置</h3><p>删除解决掉后，发现单独只替换图片位置再保存的时候，实际图片位置未替换。需求提的就是这一点，这个肯定是要完善的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">handleDragEnter(e,item)&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 单独替换位置时保存图片及相应位置</span><br><span class="line">    this.formItem.imgs_arr &#x3D; []</span><br><span class="line">    this.uploadLists.forEach((el, index) &#x3D;&gt;&#123;</span><br><span class="line">        this.formItem.imgs_arr.push(el.url.split(&#39;img&#x2F;&#39;)[1])</span><br><span class="line">    &#125;)</span><br><span class="line">    this.formItem.imgs &#x3D; this.formItem.imgs_arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个操作起来也简单，就是在替换的时候重新赋值回显加后台要接收的。<br>OK，至此问题解决。</p><h3 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h3><p><img src="/img/up_pic/up_pic1.jpg" alt="funnel"><br><img src="/img/up_pic/up_pic2.jpg" alt="funnel"><br><img src="/img/up_pic/up_pic3.jpg" alt="funnel"></p><h3 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h3><p>通过div拖拽来实现图片的拖拽效果。<strong>在所需要拖拽的范围外加一层div</strong>。<br><strong>主要就是拖拽方法、以及删除方法中相应的参数变化和接收，对应准确后可正常操作</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> iview </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iview </tag>
            
            <tag> upload </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iview表格操作类封装</title>
      <link href="/2020/06/15/iview%E8%A1%A8%E6%A0%BC%E6%93%8D%E4%BD%9C%E7%B1%BB%E5%B0%81%E8%A3%85/"/>
      <url>/2020/06/15/iview%E8%A1%A8%E6%A0%BC%E6%93%8D%E4%BD%9C%E7%B1%BB%E5%B0%81%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>&ensp;&ensp;&ensp;&ensp;最近接触的iview的项目较多，iview使用起来也较容易上手。只是有一点 ，表格中部分需要操作更改的显示只能放在render中修改，少数还好，一旦多了会显得columns里代码很繁琐。</p><a id="more"></a><p>&ensp;&ensp;&ensp;&ensp;一旦复杂程度多一点，data中就会显示很多代码，而实际在data返回中一般是不需要逻辑操作的（个人认为），所以视情况封装。<br>&ensp;&ensp;&ensp;&ensp;以下是针对操作按钮的，比如需要在table中显示编辑、删除等。</p><h4 id="table显示"><a href="#table显示" class="headerlink" title="table显示"></a>table显示</h4><p><img src="/img/iview_table/iview_table.jpg" alt="funnel"></p><h4 id="初始加载"><a href="#初始加载" class="headerlink" title="初始加载"></a>初始加载</h4><p>就按钮而言，可定义多个函数（可传递多个参数，实际根据自己所需）<br><img src="/img/iview_table/iview_table2.jpg" alt="funnel"></p><h4 id="点击按钮"><a href="#点击按钮" class="headerlink" title="点击按钮"></a>点击按钮</h4><p>点击按钮时传递相关参数，打开所需要编辑的modal。<br><img src="/img/iview_table/iview_table3.jpg" alt="funnel"><br>回过头来看，此时的columns中我们只需要这么写，在data中就不会有过多的复杂代码：<br><img src="/img/iview_table/iview_table4.jpg" alt="funnel"></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>会话</title>
      <link href="/2020/05/16/session/"/>
      <url>/2020/05/16/session/</url>
      
        <content type="html"><![CDATA[<p>&ensp;&ensp;&ensp;&ensp;session这个词经常跟会话绑定在一块，一次session就是一次会话。所谓的一次会话就是浏览器和服务器的一次通话。从打开浏览器访问一个服务器开始，就是创建了一个session，会话就开始了。</p><a id="more"></a><p><img src="/img/session/session.png" alt="funnel"></p><p>&ensp;&ensp;&ensp;&ensp;服务器创建session、cookie，服务器保存session信息，但有一个唯一标识符sessionid保存在cookie中发送给浏览器，再访问时根据sessionid找session信息。<br>&ensp;&ensp;&ensp;&ensp;cookie：不设置存活时间 是保存在浏览器内存中，关闭浏览器则内存消失；如果设置保存时间，将保存在浏览器硬盘中，如果不超时就一直存在，超时则消失。</p><ul><li>session销毁方式：<ul><li>session默认存活时间只有三十分钟，超时即销毁；</li><li>服务器非正常关闭，session即消失；</li></ul></li></ul><p>&ensp;&ensp;&ensp;&ensp;同时在同一个浏览器上先后访问同一个服务器的session的id是相同的，而不同浏览器上访问同一个服务器的session的id是不同的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> session </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件操作</title>
      <link href="/2020/01/19/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
      <url>/2020/01/19/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>&ensp;&ensp;&ensp;&ensp;文件操作，当前项目中很多都涉及到文件操作，根据项目所需选择相应合适的调用方法。目前展示的有文件上传、文件预览、文件导出，加一种表单的隐藏提交。</p><a id="more"></a><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 封装定义 公共 接口</span><br><span class="line">export default &#123;</span><br><span class="line">  &#x2F;&#x2F; 附件上传</span><br><span class="line">  fileUpload(data) &#123;</span><br><span class="line">    return fetch(&#39;post&#39;, &#39;URL&#x2F;upload&#39;, data)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/upload/upload1.jpg" alt="funnel"><br><img src="/img/upload/upload2.jpg" alt="funnel"><br><img src="/img/upload/upload3.jpg" alt="funnel"></p><h3 id="文件预览"><a href="#文件预览" class="headerlink" title="文件预览"></a>文件预览</h3><p>&ensp;&ensp;&ensp;&ensp;下方方法调用适用文件预览，可直接使用，只需接收参数（所需文件地址）即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">previewResume(fj_url) &#123;</span><br><span class="line">      var suffix &#x3D; &quot;&quot;;</span><br><span class="line">      let officeList &#x3D; [&quot;doc&quot;, &quot;docx&quot;, &quot;xls&quot;, &quot;xlsx&quot;, &quot;ppt&quot;, &quot;pptx&quot;];</span><br><span class="line">      let imgList &#x3D; [&quot;png&quot;, &quot;jpg&quot;, &quot;jpeg&quot;, &quot;bmp&quot;];</span><br><span class="line">      var fileArr &#x3D; fj_url.split(&quot;.&quot;);</span><br><span class="line">      var suffix &#x3D; fileArr[fileArr.length - 1];</span><br><span class="line">      if (officeList.indexOf(suffix) !&#x3D; -1) &#123;</span><br><span class="line">        window.open(</span><br><span class="line">          &quot;https:&#x2F;&#x2F;view.officeapps.live.com&#x2F;op&#x2F;view.aspx?src&#x3D;&quot; + fj_url</span><br><span class="line">        );</span><br><span class="line">      &#125; else if (imgList.indexOf(suffix) !&#x3D; -1) &#123;</span><br><span class="line">        window.open(fj_url);</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        window.open(fj_url);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><h3 id="文件导出"><a href="#文件导出" class="headerlink" title="文件导出"></a>文件导出</h3><h4 id="一：接口调用"><a href="#一：接口调用" class="headerlink" title="一：接口调用"></a>一：接口调用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">if (method &#x3D;&#x3D;&#x3D; &#39;download&#39;) &#123;</span><br><span class="line">     axios(&#123;</span><br><span class="line">         url: url,</span><br><span class="line">         method: &#39;post&#39;,</span><br><span class="line">         data: params,</span><br><span class="line">         responseType: &#39;blob&#39;</span><br><span class="line">       &#125;).then(response &#x3D;&gt; &#123;</span><br><span class="line">         resolve(response.data);</span><br><span class="line">       &#125;, err &#x3D;&gt; &#123;</span><br><span class="line">         reject(err);</span><br><span class="line">       &#125;)</span><br><span class="line">       .catch((error) &#x3D;&gt; &#123;</span><br><span class="line">         reject(error)</span><br><span class="line">       &#125;)</span><br></pre></td></tr></table></figure><p>&ensp;&ensp;&ensp;&ensp;如上是自己定义了一种类型，封装之时判断，相应处理；再api调用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">projectPatrol_export(params) &#123;</span><br><span class="line">    return fetch(&#39;download&#39;, URL + &#39;&#x2F;export&#39;, params);</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">export(id, name) &#123;</span><br><span class="line">    let data &#x3D; &#123;</span><br><span class="line">        projectId: id,</span><br><span class="line">        patrolId: this.search.patrolId,</span><br><span class="line">        patrolName: this.search.patrolName,</span><br><span class="line">        patrolType: this.search.patrolType,</span><br><span class="line">        responsible: this.search.responsible</span><br><span class="line">    &#125;;</span><br><span class="line">    api.projectPatrol_export(data).then(res &#x3D;&gt; &#123;          </span><br><span class="line">    let url &#x3D; window.URL.createObjectURL(res);</span><br><span class="line">    let link &#x3D; document.createElement(&quot;a&quot;);</span><br><span class="line">    link.style.display &#x3D; &quot;none&quot;;</span><br><span class="line">    link.href &#x3D; url;</span><br><span class="line">    link.download &#x3D; name+&#39;.xls&#39;;</span><br><span class="line">    document.body.appendChild(link);</span><br><span class="line">    link.click();</span><br><span class="line">    window.URL.revokeObjectURL(link.href);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>&ensp;&ensp;&ensp;&ensp;上述方法是创建节点进行导出，name文件名自定义，正常方法调用。</p><h4 id="二：隐藏表单提交"><a href="#二：隐藏表单提交" class="headerlink" title="二：隐藏表单提交"></a>二：隐藏表单提交</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;form :action&#x3D;&quot;this.URL&#39;&quot; target&#x3D;&quot;_blank&quot; id&#x3D;&quot;formdata&quot; method &#x3D;&quot;post&quot; style&#x3D;&quot;display: none&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;staffName&quot; :value&#x3D;&quot;number&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;  导出按钮</span><br><span class="line">&lt;Button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;reportEmploryExport()&quot;&gt;</span><br><span class="line">    &lt;img src&#x3D;&quot;..&#x2F;static&#x2F;image&#x2F;daochu2.png&quot; style&#x3D;&quot;margin-bottom:2px&quot;&#x2F;&gt; 导出</span><br><span class="line">&lt;&#x2F;Button&gt;</span><br><span class="line"></span><br><span class="line">reportEmploryExport() &#123;</span><br><span class="line">    $(&#39;#formdata&#39;).submit();</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> file相关操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>页面缓存</title>
      <link href="/2019/11/15/set_cookie/"/>
      <url>/2019/11/15/set_cookie/</url>
      
        <content type="html"><![CDATA[<p>前端页面常用缓存，具体设置哪种根据项目需求而定。分为三种：</p><ul><li>localstorage缓存</li><li>cookie缓存：</li><li>sesionstorage缓存<a id="more"></a></li></ul><h2 id="localstorage缓存"><a href="#localstorage缓存" class="headerlink" title="localstorage缓存:"></a>localstorage缓存:</h2><p>&ensp;&ensp;&ensp;&ensp;localStorage用于持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的。同源可以读取并修改localStorage数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 缓存数据字典</span><br><span class="line">      api.dictionary_get(&#123;type:&#39;Gender&#39;&#125;).then(res&#x3D;&gt;&#123;</span><br><span class="line">          localStorage.setItem(&quot;Gender&quot;, JSON.stringify(res.data));</span><br><span class="line">      &#125;)</span><br><span class="line"> localStorage.setItem(&quot;Gender&quot;, “data”);</span><br><span class="line"></span><br><span class="line"> localStorage.getItem(&quot;Gender&quot;);</span><br></pre></td></tr></table></figure><h2 id="cookie缓存："><a href="#cookie缓存：" class="headerlink" title="cookie缓存："></a>cookie缓存：</h2><p>&ensp;&ensp;&ensp;&ensp;默认时效会话级别，即不设置存活时间 是保存在浏览器内存中，关闭浏览器则内存消失；如果设置保存时间，将保存在浏览器硬盘中，如果不超时就一直存在，超时则消失。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">setCookie(name,value)&#123;</span><br><span class="line">    var exp &#x3D; new Date();</span><br><span class="line">    exp.setTime(exp.getTime() + 2*30*24*60*60*1000);</span><br><span class="line">    document.cookie &#x3D; name + &quot;&#x3D;&quot;+ escape (value) + &quot;;expires&#x3D;&quot; + exp.toGMTString();</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">getCookie(name)&#123;</span><br><span class="line">    var arr,reg&#x3D;new RegExp(&quot;(^| )&quot;+name+&quot;&#x3D;([^;]*)(;|$)&quot;);</span><br><span class="line">    if(arr&#x3D;document.cookie.match(reg))</span><br><span class="line">        return unescape(arr[2]);</span><br><span class="line">    else</span><br><span class="line">        return null;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="sessionstorage缓存"><a href="#sessionstorage缓存" class="headerlink" title="sessionstorage缓存:"></a>sessionstorage缓存:</h2><p>&ensp;&ensp;&ensp;&ensp;sessionStorage用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问,并且当会话结束后数据也随之销毁。因此sessionStorage不是一种持久化的本地存储，仅是会话级别的存储。只允许同一窗口访问。用法同localStorage。</p><h2 id="三者异同："><a href="#三者异同：" class="headerlink" title="三者异同："></a>三者异同：</h2><p><img src="/img/storage/storage.png" alt="funnel"></p>]]></content>
      
      
      
        <tags>
            
            <tag> cookie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iview基础对接</title>
      <link href="/2019/10/31/iview%E5%AF%B9%E6%8E%A5/"/>
      <url>/2019/10/31/iview%E5%AF%B9%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<p>iView 是一套基于 Vue.js 的 UI 组件库，主要服务于 PC 界面的中后台产品。</p><ul><li>高质量、功能丰富；</li><li>友好的 API ，自由灵活地使用空间；</li><li>使用单文件的 Vue 组件化开发模式。<a id="more"></a></li></ul><p><img src="/img/iview/iview.png" alt="funnel"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;  使用 npm</span><br><span class="line">$ npm install iview@1.0.1 --save</span><br><span class="line">&#x2F;&#x2F;  或使用 &lt;script&gt; 全局引用</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;iview.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="表格数据"><a href="#表格数据" class="headerlink" title="表格数据"></a>表格数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;Table stripe :columns&#x3D;&quot;columns1&quot; :data&#x3D;&quot;list&quot;&gt;&lt;&#x2F;Table&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;block&quot; style&#x3D;&quot;text-align: center;margin: 20px auto;&quot;&gt;</span><br><span class="line">    &lt;Page :total&#x3D;&quot;total&quot; &#x2F;&#x2F; 分页</span><br><span class="line">      :page-size&#x3D;&quot;pageSize&quot; </span><br><span class="line">      @on-change&#x3D;&quot;changepage&quot; </span><br><span class="line">      show-total  </span><br><span class="line">      show-elevator </span><br><span class="line">      :current&#x3D;&quot;pageNum&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>&ensp;&ensp;&ensp;&ensp;html部分由上，columns的title代表表头，key绑定接受后台传入字段名，数据部分绑定list，自动循环。<br>&ensp;&ensp;&ensp;&ensp;操作按钮需要手写，如其他字段一样；如数据无误，打印params会有相关行内数据，获取相关数据进行操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">return&#123;</span><br><span class="line">list: [],</span><br><span class="line">columns1: [</span><br><span class="line">&#123;</span><br><span class="line">                      title: &#39;缺工岗位类别&#39;,</span><br><span class="line">                      align:&quot;center&quot;,</span><br><span class="line">                      key: &#39;general&#39;,</span><br><span class="line">                      children:</span><br><span class="line">                          [</span><br><span class="line">                            &#123;</span><br><span class="line">                                title: &#39;普工&#39;,</span><br><span class="line">                                key: &#39;lackWorker&#39;,</span><br><span class="line">                                align: &#39;center&#39;,</span><br><span class="line"></span><br><span class="line">                            &#125;,</span><br><span class="line">                            &#123;</span><br><span class="line">                                title: &#39;技术&#39;,</span><br><span class="line">                                key: &#39;lackTechnician&#39;,</span><br><span class="line">                                align: &#39;center&#39;,</span><br><span class="line"></span><br><span class="line">                            &#125;,</span><br><span class="line">                              &#123;</span><br><span class="line">                                title: &#39;管理人员&#39;,</span><br><span class="line">                                key: &#39;lackManager&#39;,</span><br><span class="line">                                align: &#39;center&#39;,</span><br><span class="line">                                  width:110</span><br><span class="line"></span><br><span class="line">                            &#125;,</span><br><span class="line">                              &#123;</span><br><span class="line">                                title: &#39;其他&#39;,</span><br><span class="line">                                key: &#39;lackOther&#39;,</span><br><span class="line">                                align: &#39;center&#39;,</span><br><span class="line"></span><br><span class="line">                            &#125;</span><br><span class="line">                          ]</span><br><span class="line">                  &#125;,</span><br><span class="line">                  &#123;</span><br><span class="line">        title: &#39;操作&#39;,</span><br><span class="line">        key: &#39;other2&#39;,</span><br><span class="line">        align: &#39;center&#39;,</span><br><span class="line">          render: (h, params) &#x3D;&gt; &#123;</span><br><span class="line">            return h(&quot;div&quot;, [</span><br><span class="line">              h(</span><br><span class="line">                &quot;Button&quot;,</span><br><span class="line">                &#123;</span><br><span class="line">                  props: &#123;</span><br><span class="line">                    type: &quot;primary&quot;,</span><br><span class="line">                    size: &quot;small&quot;</span><br><span class="line">                  &#125;,</span><br><span class="line">                  style: &#123;</span><br><span class="line">                    marginRight: &quot;5px&quot;,</span><br><span class="line">                    width:&quot;24px&quot;,</span><br><span class="line">                    height:&quot;24px&quot;,</span><br><span class="line">                    color:&quot;#ffffff&quot;,</span><br><span class="line">                    backgroundColor:&quot;#12BD42&quot;,</span><br><span class="line">                    backgroundRadius:&quot;4px&quot;,</span><br><span class="line">                    borderRadius:&quot;4px&quot;</span><br><span class="line">                  &#125;,</span><br><span class="line">                  on: &#123;</span><br><span class="line">                    click: () &#x3D;&gt; &#123;</span><br><span class="line">                      this.modal2 &#x3D; true;</span><br><span class="line">                      let id &#x3D; params.row.id</span><br><span class="line">                      api.qi_planEditor(&#123;id: id&#125;).then((res) &#x3D;&gt; &#123;</span><br><span class="line">                        this.formValidate2&#x3D; res.data;</span><br><span class="line">                      &#125;)</span><br><span class="line">                    &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">              )</span><br><span class="line">            ]);</span><br><span class="line">          &#125;</span><br><span class="line">  &#125;</span><br><span class="line">              ]</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>&ensp;&ensp;&ensp;&ensp;如需进行表格相关操作，如上 rander函数内进行。</p><p>以下翻页，其他data、接口等方面同vue类似。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;页码</span><br><span class="line">   changepage(value) &#123;</span><br><span class="line">       let datas &#x3D; &#123;</span><br><span class="line">           pageNum: value,</span><br><span class="line">           pageSize: this.pageSize,</span><br><span class="line">       &#125;</span><br><span class="line">       api.qi_plan(datas).then(res&#x3D;&gt;&#123;</span><br><span class="line">           this.list &#x3D; res.data.list;</span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>echarts点击切换路由</title>
      <link href="/2019/08/12/echarts%E7%82%B9%E5%87%BB%E5%88%87%E6%8D%A2%E8%B7%AF%E7%94%B1/"/>
      <url>/2019/08/12/echarts%E7%82%B9%E5%87%BB%E5%88%87%E6%8D%A2%E8%B7%AF%E7%94%B1/</url>
      
        <content type="html"><![CDATA[<p>&ensp;&ensp;&ensp;&ensp;vue中使用echarts，然后点击echars图表进行切换路由（以funnel为例）：<br><img src="/img/funnel/funnel1.png" alt="funnel"></p><a id="more"></a><p>&ensp;&ensp;&ensp;&ensp;跳转界面因所需对dom节点操作，所以使用了mounted；<br>&ensp;&ensp;&ensp;&ensp;为过滤器赋值（路由跳转传入），如果直接在方法中赋值会比较死板，过滤器一直绑定传入数据：<br><img src="/img/funnel/funnel2.png" alt="funnel"></p><p>&ensp;&ensp;&ensp;&ensp;使用activated（进入当前存在activated()函数的页面时，一进入页面就触发）：<br><img src="/img/funnel/funnel3.png" alt="funnel"></p><p>&ensp;&ensp;&ensp;&ensp;但是重新刷新此页面时会发现，mounted和catived都会执行；因此，加上判断即可。<br><img src="/img/funnel/funnel4.png" alt="funnel"></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> echarts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>created()与mounted()</title>
      <link href="/2019/08/05/created-%E4%B8%8Emounted-/"/>
      <url>/2019/08/05/created-%E4%B8%8Emounted-/</url>
      
        <content type="html"><![CDATA[<p>&ensp;&ensp;&ensp;&ensp;created()：在创建vue对象时，当html渲染之前就触发；但是注意，全局vue.js不强制刷新或者重启时只创建一次，也就是说，created()只会触发一次；created 这个钩子在实例被创建之后被调用。一般可以在created函数中调用ajax获取页面初始化所需的数据。</p><a id="more"></a><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;parent&quot;&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;name&quot;&gt;&#123;&#123; name &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default&#123;</span><br><span class="line">data()&#123;</span><br><span class="line">return&#123;</span><br><span class="line">name: hello</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">created: function()&#123;</span><br><span class="line">console. log( document. getElementById(&quot;name&quot;).innerHTML);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;script&gt;</span><br></pre></td></tr></table></figure><p>出现如下报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">TypeError: Cannot read property &#39;innerHTML Of null&#39;</span><br><span class="line">at Vue Component created (parent, vue?cad: 17)</span><br><span class="line">at callHook (vue, esm. is2efeb: 2921)</span><br><span class="line">at VueComponent. Vue, init (yue, esm. is2efeb: 4630)</span><br><span class="line">at new Vue Component (yue, esm, is?feb: 4798)</span><br><span class="line">at createComponent InstanceForVnode (yue, esm. is2efeb: 4310)</span><br><span class="line">at init (yue, esm, is?feb: 4131)</span><br><span class="line">at createComponent (yue, esm, is?feb: 5608)</span><br><span class="line">at createElm (yue, esm.is2efeb: 5555)</span><br><span class="line">at createChildren (vue esm is2efeb 5682)</span><br></pre></td></tr></table></figure><p>挂载阶段还没开始，也就是说，模板还没有被渲染成html；也就是这时候通过id什么的去查找页面元素是找不到的</p><p>mounted()：mounted钩子函数一般是用来向后端发起请求拿到数据以后做一些业务处理，该钩子函数是在挂载完成以后也就是模板渲染完成以后才会被调用（vue的生命周期中一个实例的mounted只会运行一次）<br>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;parent&quot;&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;name&quot;&gt;&#123;&#123; name &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default&#123;</span><br><span class="line">data()&#123;</span><br><span class="line">return&#123;</span><br><span class="line">name: hello</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">mounted: function()&#123;</span><br><span class="line">console. log( document. getElementById(&quot;name&quot;).innerHTML);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;script&gt;</span><br></pre></td></tr></table></figure><p>结果是：hello<br>取到了值，这说明这时候vue模板已经渲染完毕。因此，Dom操作一般是在mounted钩子函数中进行的</p><p>&ensp;&ensp;&ensp;&ensp;通常created使用的次数多，而mounted通常是在一些插件的使用或者组件的使用中进行操作，比如插件chart.js的使用: var ctx = document.getElementById(ID);通常会有这一步，而如果你写入组件中，你会发现在created中无法对chart进行一些初始化配置，一定要等这个html渲染完后才可以进行，那么mounted就是不二之选。<br>&ensp;&ensp;&ensp;&ensp;methods:{}中的方法都需要主动去触发，比如点击click之类的<br>而created(){}、mounted(){}、里面的代码都是自动去执行的，即vue生命周期到了哪一步就直接去执行对应钩子函数里面的代码了，无需手动去执行<br>&ensp;&ensp;&ensp;&ensp;created中主要放初始化获取数据之类，mounted()中挂载到具体的DOM节点</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue钩子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css_vh</title>
      <link href="/2019/07/31/css-vh/"/>
      <url>/2019/07/31/css-vh/</url>
      
        <content type="html"><![CDATA[<p>css中height 100vh的应用场景，动态高度百分比布局，浏览器视区大小单位</p><pre><code>height:100vh</code></pre><a id="more"></a><h4 id="一些只能vw-vh才能完成的应用场景："><a href="#一些只能vw-vh才能完成的应用场景：" class="headerlink" title="一些只能vw, vh才能完成的应用场景："></a>一些只能vw, vh才能完成的应用场景：</h4><h5 id="场景之：元素的尺寸限制"><a href="#场景之：元素的尺寸限制" class="headerlink" title="场景之：元素的尺寸限制"></a>场景之：元素的尺寸限制</h5><p>vw vh 主要是实现了动态高度百分比布局，比如宽高比不固定的图片，vw很轻易的实现正方形图片缩略图<br>原始大图的尺寸限制问题——因为很有可能图片过大，尼玛一屏显示器区域不够放，我们需要对其进行缩放处理。<br>这类限制的实现，在当下，需要获得图片的原始大小，以及浏览器内部尺寸，算大小，算比例等，算是比较折腾的。<br>但是，vw, vh等单位本身就是浏览器视区大小相关单位，直接使用其做限制，岂不省了N多JS代码？<br>CSS代码：<br>.vw_vh_img {<br>max-width: 90vw;<br>max-height: 90%;<br>max-height: 90vh;<br>}</p><h5 id="CSS3新vw-vh单位与纯CSS定位的弹框屏幕居中效果实例页面"><a href="#CSS3新vw-vh单位与纯CSS定位的弹框屏幕居中效果实例页面" class="headerlink" title="CSS3新vw, vh单位与纯CSS定位的弹框屏幕居中效果实例页面"></a>CSS3新vw, vh单位与纯CSS定位的弹框屏幕居中效果实例页面</h5><h5 id="视区覆盖以及边界定位"><a href="#视区覆盖以及边界定位" class="headerlink" title="视区覆盖以及边界定位"></a>视区覆盖以及边界定位</h5><p>vh确实是相对于屏幕的，但默认body有一个margin，100%加上这个margin就超出了就会出现滚动条。清除body的margin即可。<br>body{margin:0;}</p><h4 id="在做手机端的时候经常会用到的做字体的尺寸单位"><a href="#在做手机端的时候经常会用到的做字体的尺寸单位" class="headerlink" title="在做手机端的时候经常会用到的做字体的尺寸单位"></a>在做手机端的时候经常会用到的做字体的尺寸单位</h4><h5 id="em"><a href="#em" class="headerlink" title="em"></a>em</h5><p>说白了 em就相当于“倍”，比如设置当前的div的字体大小为1.5em，则当前的div的字体大小为：当前div继承的字体大小*1.5<br>但是当div进行嵌套的时候，em始终是按照当前div继承的字体大小来缩放，参照后面的例子。</p><h5 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h5><p>这里的r就是root的意思，意思是相对于根节点来进行缩放，当有嵌套关系的时候，嵌套关系的元素的字体大小始终按照根节点的字体大小进行缩放。<br>参照后面给的demo</p><h5 id="vh"><a href="#vh" class="headerlink" title="vh"></a>vh</h5><p>vh就是当前屏幕可见高度的1%，也就是说<br>height:100vh == height:100%;<br>但是有个好处是当元素没有内容时候，设置height:100%该元素不会被撑开，<br>但是设置height:100vh，该元素会被撑开屏幕高度一致。</p><h5 id="vw"><a href="#vw" class="headerlink" title="vw"></a>vw</h5><p>vw就是当前屏幕宽度的1%<br>补充一句，当设置width:100%，被设置元素的宽度是按照父元素的宽度来设置，<br>但是100vw是相对于屏幕可见宽度来设置的，所以会出现50vw 比50%大的情况</p><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;Zh-cn&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;一程烟雨&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;style type&#x3D;&quot;text&#x2F;css&quot; media&#x3D;&quot;screen&quot;&gt;</span><br><span class="line">html&#123;</span><br><span class="line">font-size: 14px;</span><br><span class="line">&#125;</span><br><span class="line">.em,</span><br><span class="line">.em &gt; .em-son,</span><br><span class="line">.em &gt; .em-son &gt; .em-grandson &#123;</span><br><span class="line">font-size: 1.2em;</span><br><span class="line">&#125;</span><br><span class="line">.rem,</span><br><span class="line">.rem &gt; .rem-son,</span><br><span class="line">.rem &gt; .rem-son &gt; .rem-grandson &#123;</span><br><span class="line">font-size: 1.2rem;</span><br><span class="line">&#125;</span><br><span class="line">.rem-box &#123;</span><br><span class="line">background: #d60b3b;</span><br><span class="line">width:10rem;</span><br><span class="line">height: 10rem;</span><br><span class="line">color: #fff;</span><br><span class="line">text-align: center;</span><br><span class="line">line-height:5rem;</span><br><span class="line">&#125;</span><br><span class="line">.vhvw-box &#123;</span><br><span class="line">background: #d60b3b;</span><br><span class="line">width:50vw;</span><br><span class="line">height: 50vh;</span><br><span class="line">color: #fff;</span><br><span class="line">text-align: center;</span><br><span class="line">line-height:25vh;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;em 继承父元素的字体大小，来变大或变小，多层嵌套字体变化&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;em&quot;&gt;</span><br><span class="line">字体大小 1.2 * 14（父元素body） &#x3D; 16px</span><br><span class="line">&lt;div class&#x3D;&quot;em-son&quot;&gt;</span><br><span class="line">字体大小 1.2 * 16(父元素em) &#x3D; 20px</span><br><span class="line">&lt;div class&#x3D;&quot;em-grandson&quot;&gt;</span><br><span class="line">字体大小 1.2 * 20(父元素em-son) &#x3D; 24px</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;h1&gt;rem 继承根节点元素的字体大小，来变大或变小，多层嵌套字体不变化&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;rem&quot;&gt;</span><br><span class="line">字体大小 1.2 * 14（根节点html） &#x3D; 16px</span><br><span class="line">&lt;div class&#x3D;&quot;rem-son&quot;&gt;</span><br><span class="line">字体大小 1.2 * 14（根节点html） &#x3D; 16px</span><br><span class="line">&lt;div class&#x3D;&quot;rem-grandson&quot;&gt;</span><br><span class="line">字体大小 1.2 * 14（根节点html） &#x3D; 16px</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;h1&gt;rem 也可作为固定长度单位设置宽高等&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;rem-box&quot;&gt;</span><br><span class="line">宽：14 * 10 &#x3D; 140px&lt;br&gt;</span><br><span class="line">高：14 * 10 &#x3D; 140px</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;h1&gt;vh,vw 屏幕可见区域的高度，宽度的1%&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;vhvw-box&quot;&gt;</span><br><span class="line">宽：屏幕宽度的50%&lt;br&gt;</span><br><span class="line">高：屏幕高度的50%</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;Zh-cn&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;一程烟雨&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;style type&#x3D;&quot;text&#x2F;css&quot; media&#x3D;&quot;screen&quot;&gt;</span><br><span class="line">html&#123;</span><br><span class="line">font-size: 14px;</span><br><span class="line">&#125;</span><br><span class="line">.em,</span><br><span class="line">.em &gt; .em-son,</span><br><span class="line">.em &gt; .em-son &gt; .em-grandson &#123;</span><br><span class="line">font-size: 1.2em;</span><br><span class="line">&#125;</span><br><span class="line">.rem,</span><br><span class="line">.rem &gt; .rem-son,</span><br><span class="line">.rem &gt; .rem-son &gt; .rem-grandson &#123;</span><br><span class="line">font-size: 1.2rem;</span><br><span class="line">&#125;</span><br><span class="line">.rem-box &#123;</span><br><span class="line">background: #d60b3b;</span><br><span class="line">width:10rem;</span><br><span class="line">height: 10rem;</span><br><span class="line">color: #fff;</span><br><span class="line">text-align: center;</span><br><span class="line">line-height:5rem;</span><br><span class="line">&#125;</span><br><span class="line">.vhvw-box &#123;</span><br><span class="line">background: #d60b3b;</span><br><span class="line">width:50vw;</span><br><span class="line">height: 50vh;</span><br><span class="line">color: #fff;</span><br><span class="line">text-align: center;</span><br><span class="line">line-height:25vh;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;em 继承父元素的字体大小，来变大或变小，多层嵌套字体变化&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;em&quot;&gt;</span><br><span class="line">字体大小 1.2 * 14（父元素body） &#x3D; 16px</span><br><span class="line">&lt;div class&#x3D;&quot;em-son&quot;&gt;</span><br><span class="line">字体大小 1.2 * 16(父元素em) &#x3D; 20px</span><br><span class="line">&lt;div class&#x3D;&quot;em-grandson&quot;&gt;</span><br><span class="line">字体大小 1.2 * 20(父元素em-son) &#x3D; 24px</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;h1&gt;rem 继承根节点元素的字体大小，来变大或变小，多层嵌套字体不变化&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;rem&quot;&gt;</span><br><span class="line">字体大小 1.2 * 14（根节点html） &#x3D; 16px</span><br><span class="line">&lt;div class&#x3D;&quot;rem-son&quot;&gt;</span><br><span class="line">字体大小 1.2 * 14（根节点html） &#x3D; 16px</span><br><span class="line">&lt;div class&#x3D;&quot;rem-grandson&quot;&gt;</span><br><span class="line">字体大小 1.2 * 14（根节点html） &#x3D; 16px</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;h1&gt;rem 也可作为固定长度单位设置宽高等&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;rem-box&quot;&gt;</span><br><span class="line">宽：14 * 10 &#x3D; 140px&lt;br&gt;</span><br><span class="line">高：14 * 10 &#x3D; 140px</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;h1&gt;vh,vw 屏幕可见区域的高度，宽度的1%&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;vhvw-box&quot;&gt;</span><br><span class="line">宽：屏幕宽度的50%&lt;br&gt;</span><br><span class="line">高：屏幕高度的50%</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux命令操作</title>
      <link href="/2019/07/26/hello-world/"/>
      <url>/2019/07/26/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Linux使用者逐渐增多，对Linux熟练掌握成为必然，随后，那就必须学会它的操作命令。虽然可能会花费一些时间，不过从长远的角度来说，这的确是一件事半功倍的事情，它会让我们更了解Linux，更灵活地去使用Linux。</p><a id="more"></a><p>Linux提供了很多命令，接下来简单介绍下Linux的操作命令，系统学习。</p><h4 id="查看进程相关"><a href="#查看进程相关" class="headerlink" title="查看进程相关"></a>查看进程相关</h4><p>windows操作系统下，已知端口号，查看进程号，以及关闭进程</p><p>netstat -ano|findstr 端口号<br>tskill 进程号<br>    /f 杀死所有进程及子进程<br>    /t 强制杀死<br>    /im 用镜像名称作为进程信息<br>    /pid 用进程id作为进程信息</p><p>linux操作系统下：</p><p>1、已知端口号，查看进程号</p><pre><code>命令行：netstat -tunlp|grep 端口号 或 lsof -i :端口号 等等</code></pre><p>2、关闭该进程</p><pre><code>命令行：sudo kill 进程号注意：如果没有关闭掉，请使用命令&apos;sudo kill -9 进程号&apos;，强制关闭掉</code></pre><p>3、查看端口是否已经被占用</p><pre><code>命令行：netstat -tln|grep 端口号</code></pre><h4 id="系统操作命令"><a href="#系统操作命令" class="headerlink" title="系统操作命令"></a>系统操作命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">系统</span><br><span class="line"># uname -a               # 查看内核&#x2F;操作系统&#x2F;CPU信息</span><br><span class="line"># head -n 1 &#x2F;etc&#x2F;issue   # 查看操作系统版本</span><br><span class="line"># cat &#x2F;proc&#x2F;cpuinfo      # 查看CPU信息</span><br><span class="line"># hostname               # 查看计算机名</span><br><span class="line"># lspci -tv              # 列出所有PCI设备</span><br><span class="line"># lsusb -tv              # 列出所有USB设备</span><br><span class="line"># lsmod                  # 列出加载的内核模块</span><br><span class="line"># env                    # 查看环境变量</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">资源</span><br><span class="line"># free -m                # 查看内存使用量和交换区使用量</span><br><span class="line"># df -h                  # 查看各分区使用情况</span><br><span class="line"># du -sh &lt;目录名&gt;        # 查看指定目录的大小</span><br><span class="line"># grep MemTotal &#x2F;proc&#x2F;meminfo   # 查看内存总量</span><br><span class="line"># grep MemFree &#x2F;proc&#x2F;meminfo    # 查看空闲内存量</span><br><span class="line"># uptime                 # 查看系统运行时间、用户数、负载</span><br><span class="line"># cat &#x2F;proc&#x2F;loadavg      # 查看系统负载</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">磁盘和分区</span><br><span class="line"># mount | column -t      # 查看挂接的分区状态</span><br><span class="line"># fdisk -l               # 查看所有分区</span><br><span class="line"># swapon -s              # 查看所有交换分区</span><br><span class="line"># hdparm -i &#x2F;dev&#x2F;hda     # 查看磁盘参数(仅适用于IDE设备)</span><br><span class="line"># dmesg | grep IDE       # 查看启动时IDE设备检测状况</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">网络</span><br><span class="line"># ifconfig               # 查看所有网络接口的属性</span><br><span class="line"># iptables -L            # 查看防火墙设置</span><br><span class="line"># route -n               # 查看路由表</span><br><span class="line"># netstat -lntp          # 查看所有监听端口</span><br><span class="line"># netstat -antp          # 查看所有已经建立的连接</span><br><span class="line"># netstat -s             # 查看网络统计信息</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">进程</span><br><span class="line"># ps -ef                 # 查看所有进程</span><br><span class="line"># top                    # 实时显示进程状态</span><br><span class="line"></span><br><span class="line"># ps -e | grep apt # 查看apt-get相关进程</span><br><span class="line"># sudo fuser -k 8000&#x2F;tcp#关闭和端口8000相关进程</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">用户</span><br><span class="line"># w                      # 查看活动用户</span><br><span class="line"># id &lt;用户名&gt;            # 查看指定用户信息</span><br><span class="line"># last                   # 查看用户登录日志</span><br><span class="line"># cut -d: -f1 &#x2F;etc&#x2F;passwd   # 查看系统所有用户</span><br><span class="line"># cut -d: -f1 &#x2F;etc&#x2F;group    # 查看系统所有组</span><br><span class="line"># crontab -l             # 查看当前用户的计划任务</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">服务</span><br><span class="line"># chkconfig --list       # 列出所有系统服务</span><br><span class="line"># chkconfig --list | grep on    # 列出所有启动的系统服务</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">程序</span><br><span class="line"># rpm -qa                # 查看所有安装的软件包</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux操作命令 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
